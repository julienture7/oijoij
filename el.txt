"package.json", "C:/Users/Ben/Downloads/poul-main/poul-main/package.json": "{
  "name": "nextjs-shadcn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -H 0.0.0.0 --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "bunx biome lint --write && bunx tsc --noEmit",
    "format": "bunx biome format --write"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.9",
    "@radix-ui/react-checkbox": "^1.3.1",
    "@radix-ui/react-dialog": "^1.1.13",
    "@radix-ui/react-dropdown-menu": "^2.1.14",
    "@radix-ui/react-hover-card": "^1.1.13",
    "@radix-ui/react-popover": "^1.1.13",
    "@radix-ui/react-progress": "^1.1.6",
    "@radix-ui/react-select": "^2.2.4",
    "@radix-ui/react-separator": "^1.1.6",
    "@radix-ui/react-slot": "^1.2.2",
    "@radix-ui/react-switch": "^1.2.4",
    "@radix-ui/react-tabs": "^1.1.11",
    "@radix-ui/react-tooltip": "^1.2.6",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.511.0",
    "next": "^15.2.0",
    "next-themes": "^0.4.6",
    "react": "^18.3.1",
    "react-day-picker": "8.10.1",
    "react-dom": "^18.3.1",
    "recharts": "^2.15.3",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@biomejs/biome": "1.9.4",
    "@types/node": "^20",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
"

".gitignore", "C:/Users/Ben/Downloads/poul-main/poul-main/.gitignore": "# Dependencies
node_modules/

# Next.js build output and cache
.next/
out/

# Bun - bun.lockb is the binary lockfile.
# bun.lock (the text file) SHOULD be committed.
# If you see a .bun-debug or similar, add it too.
# For now, we'll assume bun.lock is the one you want to keep.

# Local environment variables
# IMPORTANT: Never commit your actual .env files with secrets!
.env
.env.local
.env.development.local
.env.production.local
.env.test.local

# It's good practice to commit a .env.example file if you have one
# !.env.example

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
# Add Bun-specific log files if they exist (e.g., bun-debug.log)

# OS generated files
.DS_Store
Thumbs.db

# Editor directories and files
.vscode/
.idea/
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Temporary/Generated files from your listing
# If 'output.txt' and 'structure.txt' are not meant to be part of the repository,
# keep them here. If they are important files you want to track, remove them from this .gitignore.
output.txt
structure.txt

# Other common Next.js ignores
# next-env.d.ts is usually generated and can be ignored,
# but many prefer to commit it for explicitness, especially if customized.
# If you don't customize it and it's always generated, you can add:
# next-env.d.ts"

"biome.json", "C:/Users/Ben/Downloads/poul-main/poul-main/biome.json": "{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "vcs": {
    "enabled": false,
    "clientKind": "git",
    "useIgnoreFile": false
  },
  "files": {
    "ignoreUnknown": false,
    "ignore": ["dist", ".next", "node_modules", "build", "src/generated/**"],
    "include": ["src/**/*.ts", "src/**/*.tsx"]
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space"
  },
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "correctness": {
        "noUnusedVariables": "off"
      },
      "nursery": {
        "noImgElement": "off"
      },
      "a11y": {
        "noAutofocus": "off",
        "noDistractingElements": "off",
        "noHeaderScope": "off",
        "noInteractiveElementToNoninteractiveRole": "off",
        "noLabelWithoutControl": "off",
        "noNoninteractiveElementToInteractiveRole": "off",
        "noNoninteractiveTabindex": "off",
        "noPositiveTabindex": "off",
        "noRedundantAlt": "off",
        "noRedundantRoles": "off",
        "noSvgWithoutTitle": "off",
        "useAltText": "off",
        "useKeyWithClickEvents": "off",
        "useKeyWithMouseEvents": "off",
        "useButtonType": "off"
      }
    }
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "double"
    }
  }
}
"

"components.json", "C:/Users/Ben/Downloads/poul-main/poul-main/components.json": "{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}"

"eslint.config.mjs", "C:/Users/Ben/Downloads/poul-main/poul-main/eslint.config.mjs": "import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    rules: {
      "@typescript-eslint/no-unused-vars": "off",
      "react/no-unescaped-entities": "off",
      "@next/next/no-img-element": "off",
      "jsx-a11y/alt-text": "off",
    },
  },
];

export default eslintConfig;
"

"netlify.toml", "C:/Users/Ben/Downloads/poul-main/poul-main/netlify.toml": "[images]
  remote_images = ["https://source.unsplash.com/.*", "https://images.unsplash.com/.*", "https://ext.same-assets.com/.*", "https://ugc.same-assets.com/.*"]

[build]
  command = "bun run build"
  publish = ".next"

[build.environment]
  NETLIFY_NEXT_PLUGIN_SKIP = "true"

[[plugins]]
  package = "@netlify/plugin-nextjs""

"next.config.js", "C:/Users/Ben/Downloads/poul-main/poul-main/next.config.js": "/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    unoptimized: true,
    domains: [
      "source.unsplash.com",
      "images.unsplash.com",
      "ext.same-assets.com",
      "ugc.same-assets.com",
    ],
    remotePatterns: [
      {
        protocol: "https",
        hostname: "source.unsplash.com",
        pathname: "/**",
      },
      {
        protocol: "https",
        hostname: "images.unsplash.com",
        pathname: "/**",
      },
      {
        protocol: "https",
        hostname: "ext.same-assets.com",
        pathname: "/**",
      },
      {
        protocol: "https",
        hostname: "ugc.same-assets.com",
        pathname: "/**",
      },
    ],
  },
};

module.exports = nextConfig;
"

"next-env.d.ts", "C:/Users/Ben/Downloads/poul-main/poul-main/next-env.d.ts": "/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
"

"postcss.config.mjs", "C:/Users/Ben/Downloads/poul-main/poul-main/postcss.config.mjs": "/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
"

"README.md", "C:/Users/Ben/Downloads/poul-main/poul-main/README.md": "This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
"# medical" 
"

"tailwind.config.ts", "C:/Users/Ben/Downloads/poul-main/poul-main/tailwind.config.ts": "import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))'
        },
        health: {
          normal: 'hsl(var(--health-normal))',
          'normal-bg': 'hsl(var(--health-normal-bg))',
          abnormal: 'hsl(var(--health-abnormal))',
          'abnormal-bg': 'hsl(var(--health-abnormal-bg))',
          caution: 'hsl(var(--health-caution))',
          'caution-bg': 'hsl(var(--health-caution-bg))',
        },
        medical: {
          blue: 'hsl(var(--medical-blue))',
          'blue-light': 'hsl(var(--medical-blue-light))',
          teal: 'hsl(var(--medical-teal))',
          'teal-light': 'hsl(var(--medical-teal-light))',
          indigo: 'hsl(var(--medical-indigo))',
          'indigo-light': 'hsl(var(--medical-indigo-light))',
          purple: 'hsl(var(--medical-purple))',
          'purple-light': 'hsl(var(--medical-purple-light))',
        }
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
      container: {
      center: true,
      padding: {
        DEFAULT: '1rem',
        sm: '2rem',
        lg: '4rem',
        xl: '5rem',
        '2xl': '6rem',
      },
      screens: {
        sm: '640px',
        md: '768px',
        lg: '1024px',
        xl: '1280px',
        '2xl': '1536px',
      },
      },
    }
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
"

"tsconfig.json", "C:/Users/Ben/Downloads/poul-main/poul-main/tsconfig.json": "{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next-env.d.ts",
    "build/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
"

"new-sidebar.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/new-sidebar.tsx": "// src/components/new-sidebar.tsx
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";
// Correctly import ALL icons used
import { Home, FlaskConical, ScrollText, Stethoscope, Activity, User, Pill } from "lucide-react"; // Added Pill here

const navItems = [
  { href: "/", label: "Vue d'Ensemble", icon: <Home size={18} /> },
  { href: "/historique", label: "Historique", icon: <ScrollText size={18} /> },
  { href: "/laboratoire", label: "Laboratoire", icon: <FlaskConical size={18} /> },
  { href: "/prescriptions", label: "Prescriptions", icon: <Pill size={18} /> }, // Pill icon is used here
  { href: "/symptomes", label: "Symptômes", icon: <Activity size={18} /> },
  // { href: "/profil", label: "Profil", icon: <User size={18} /> }, // Uncomment if you have a profile page
];


export function NewSidebar() {
  const pathname = usePathname();

  return (
    <aside className="h-screen w-[240px] border-r bg-card shrink-0 flex flex-col">
      <div className="p-6">
        <div className="font-semibold text-xl text-primary mb-8 flex items-center gap-2">
           <Stethoscope size={28} className="text-primary"/> MedDash
        </div>

        <nav className="space-y-2">
          {navItems.map((item) => (
            <Link
              key={item.label}
              href={item.href}
              className={cn(
                "flex items-center gap-3 px-3 py-2.5 rounded-md text-sm font-medium transition-colors",
                pathname === item.href
                  ? "bg-primary/10 text-primary"
                  : "text-muted-foreground hover:bg-primary/5 hover:text-primary/90"
              )}
            >
              {item.icon}
              {item.label}
            </Link>
          ))}
        </nav>
      </div>
       <div className="p-6 mt-auto"> {/* Added mt-auto to push copyright to bottom */}
        <span className="text-xs text-muted-foreground">
          © {new Date().getFullYear()} Medical Dashboard
        </span>
      </div>
    </aside>
  );
}"

"sidebar.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/sidebar.tsx": ""use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  Home,
  Flask,
  Pill,
  AlertCircle,
  User,
  Settings,
  Menu,
  X,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { useState, useEffect } from "react";

interface NavItemProps {
  href: string;
  icon: React.ReactNode;
  label: string;
  isActive: boolean;
}

const NavItem = ({ href, icon, label, isActive }: NavItemProps) => {
  return (
    <Link href={href} className="w-full">
      <Button
        variant="ghost"
        className={cn(
          "w-full justify-start gap-3 font-normal",
          isActive ? "bg-primary/10 text-primary" : "hover:bg-primary/5"
        )}
      >
        {icon}
        <span>{label}</span>
      </Button>
    </Link>
  );
};

export function Sidebar() {
  const pathname = usePathname();
  const [collapsed, setCollapsed] = useState(false);

  return (
    <aside className={cn(
      "h-screen border-r bg-card transition-all duration-300 shrink-0",
      collapsed ? "w-[70px]" : "w-[240px]"
    )}>
      <div className="flex flex-col h-full">
        <div className="p-4 flex items-center justify-between border-b">
          {!collapsed && (
            <div className="font-semibold text-xl text-primary">
              MedDash
            </div>
          )}
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setCollapsed(!collapsed)}
            className="ml-auto"
          >
            {collapsed ? <Menu size={20} /> : <X size={20} />}
          </Button>
        </div>

        <div className="flex-1 py-4 overflow-y-auto">
          <div className="space-y-1 px-3">
            {!collapsed ? (
              <>
                <NavItem
                  href="/"
                  icon={<Home size={20} />}
                  label="Vue d'Ensemble"
                  isActive={pathname === "/"}
                />
                <NavItem
                  href="/laboratoire"
                  icon={<Flask size={20} />}
                  label="Laboratoire"
                  isActive={pathname === "/laboratoire"}
                />
                <NavItem
                  href="/prescriptions"
                  icon={<Pill size={20} />}
                  label="Prescriptions"
                  isActive={pathname === "/prescriptions"}
                />
                <NavItem
                  href="/symptomes"
                  icon={<AlertCircle size={20} />}
                  label="Symptômes"
                  isActive={pathname === "/symptomes"}
                />
                <NavItem
                  href="/profile"
                  icon={<User size={20} />}
                  label="Profile"
                  isActive={pathname === "/profile"}
                />
              </>
            ) : (
              <>
                <Button
                  variant="ghost"
                  size="icon"
                  asChild
                  className={cn(
                    "w-full my-1",
                    pathname === "/" ? "bg-primary/10 text-primary" : "hover:bg-primary/5"
                  )}
                >
                  <Link href="/"><Home size={20} /></Link>
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  asChild
                  className={cn(
                    "w-full my-1",
                    pathname === "/laboratoire" ? "bg-primary/10 text-primary" : "hover:bg-primary/5"
                  )}
                >
                  <Link href="/laboratoire"><Flask size={20} /></Link>
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  asChild
                  className={cn(
                    "w-full my-1",
                    pathname === "/prescriptions" ? "bg-primary/10 text-primary" : "hover:bg-primary/5"
                  )}
                >
                  <Link href="/prescriptions"><Pill size={20} /></Link>
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  asChild
                  className={cn(
                    "w-full my-1",
                    pathname === "/symptomes" ? "bg-primary/10 text-primary" : "hover:bg-primary/5"
                  )}
                >
                  <Link href="/symptomes"><AlertCircle size={20} /></Link>
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  asChild
                  className={cn(
                    "w-full my-1",
                    pathname === "/profile" ? "bg-primary/10 text-primary" : "hover:bg-primary/5"
                  )}
                >
                  <Link href="/profile"><User size={20} /></Link>
                </Button>
              </>
            )}
          </div>
        </div>

        <div className="p-4 border-t">
          <span className="text-xs text-muted-foreground">Medical Dashboard</span>
        </div>
      </div>
    </aside>
  );
}
"

"medical-event-card.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/historique/medical-event-card.tsx": "// src/components/historique/medical-event-card.tsx
import { MedicalEvent } from "@/data/types";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { AlertTriangle, CheckCircle, FileText, Microscope, StickyNote, Stethoscope, Syringe, Pill, Brain, Bone } from "lucide-react";

interface MedicalEventCardProps {
  event: MedicalEvent;
}

const getIconForTitle = (title: string) => {
  if (title.toLowerCase().includes("traitement")) return <Pill className="mr-2 h-5 w-5 text-primary" />;
  if (title.toLowerCase().includes("symptom") || title.toLowerCase().includes("problème")) return <AlertTriangle className="mr-2 h-5 w-5 text-destructive" />;
  if (title.toLowerCase().includes("imagerie") || title.toLowerCase().includes("scanner") || title.toLowerCase().includes("irm")) return <FileText className="mr-2 h-5 w-5 text-blue-500" />;
  if (title.toLowerCase().includes("lab") || title.toLowerCase().includes("sanguin") || title.toLowerCase().includes("analyse")) return <Microscope className="mr-2 h-5 w-5 text-green-500" />;
  if (title.toLowerCase().includes("découverte")) return <CheckCircle className="mr-2 h-5 w-5 text-teal-500" />;
  if (title.toLowerCase().includes("note")) return <StickyNote className="mr-2 h-5 w-5 text-yellow-500" />;
  if (title.toLowerCase().includes("neurologique") || title.toLowerCase().includes("cognitif")) return <Brain className="mr-2 h-5 w-5 text-purple-500" />;
  if (title.toLowerCase().includes("musculo-squelettique") || title.toLowerCase().includes("articulation")) return <Bone className="mr-2 h-5 w-5 text-orange-500" />;


  return <Stethoscope className="mr-2 h-5 w-5 text-primary" />;
}

export function MedicalEventCard({ event }: MedicalEventCardProps) {
  return (
    <Card className="ml-4 shadow-md hover:shadow-lg transition-shadow duration-200">
      <CardHeader>
        <div className="flex items-center justify-between">
            <CardTitle className="text-xl flex items-center">
                {getIconForTitle(event.title)}
                {event.title}
            </CardTitle>
            <Badge variant="outline" className="text-sm font-semibold">{typeof event.year === 'number' ? event.year : event.year}</Badge>
        </div>
        {event.description && <CardDescription className="pt-2">{event.description}</CardDescription>}
      </CardHeader>
      <CardContent className="space-y-4">
        {event.details && event.details.length > 0 && (
          <div>
            <h4 className="font-semibold text-md mb-2 text-primary/80">Détails :</h4>
            <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
              {event.details.map((detail, i) => (
                <li key={i}>{detail}</li>
              ))}
            </ul>
          </div>
        )}

        {event.labSummary && (
          <div>
            <h4 className="font-semibold text-md mb-2 text-green-600 dark:text-green-400">Résumé Laboratoire :</h4>
            <p className="text-sm text-muted-foreground p-3 bg-muted/50 rounded-md">{event.labSummary}</p>
          </div>
        )}

        {event.discoveries && event.discoveries.length > 0 && (
          <div>
            <h4 className="font-semibold text-md mb-2 text-teal-600 dark:text-teal-400">Découvertes :</h4>
            <div className="space-y-3">
              {event.discoveries.map((discovery, i) => (
                <div key={i} className="p-3 border rounded-md bg-primary/5">
                  <p className="font-medium text-primary">{discovery.name}</p>
                  <p className="text-sm text-muted-foreground mt-1">{discovery.description}</p>
                  {discovery.details && discovery.details.length > 0 && (
                     <ul className="list-disc list-inside space-y-1 text-xs text-muted-foreground/80 mt-2 pl-4">
                        {discovery.details.map((d, idx) => <li key={idx}>{d}</li>)}
                     </ul>
                  )}
                  {discovery.outcome && <p className="text-xs italic text-primary/70 mt-2">{discovery.outcome}</p>}
                </div>
              ))}
            </div>
          </div>
        )}

        {event.imaging && event.imaging.length > 0 && (
          <div>
            <h4 className="font-semibold text-md mb-2 text-blue-600 dark:text-blue-400">Imagerie :</h4>
            <div className="space-y-3">
              {event.imaging.map((img, i) => (
                <div key={i} className="p-3 border rounded-md bg-blue-500/5">
                  <div className="flex justify-between items-center">
                    <p className="font-medium text-blue-700 dark:text-blue-300">{img.type} - {img.location}</p>
                    <Badge variant="secondary" className="text-xs">{new Date(img.date).toLocaleDateString('fr-FR', { year: 'numeric', month: 'short', day: 'numeric' })}</Badge>
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">{img.clinic}</p>
                  <p className="text-sm mt-2"><span className="font-medium">Indication:</span> {img.indication}</p>
                  {img.results && img.results.length > 0 && (
                    <>
                      <p className="text-sm font-medium mt-2">Résultats :</p>
                      <ul className="list-disc list-inside space-y-1 text-xs text-muted-foreground/90 pl-4">
                        {img.results.map((res, idx) => <li key={idx}>{res}</li>)}
                      </ul>
                    </>
                  )}
                  <p className="text-sm mt-2"><span className="font-medium">Conclusion:</span> {img.conclusion}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {event.treatments && event.treatments.length > 0 && (
           <div>
            {/* Group treatments by positive/negative if needed, or list them all */}
            {/* This example lists them under one heading, you can refine */}
            <h4 className="font-semibold text-md mb-2 text-purple-600 dark:text-purple-400">Réponses aux Traitements :</h4>
            <div className="space-y-3">
              {event.treatments.map((treatment, i) => (
                <div key={i} className={`p-3 border rounded-md ${treatment.positive ? 'bg-green-500/5 border-green-500/30' : 'bg-red-500/5 border-red-500/30'}`}>
                  <div className="flex items-center">
                    {treatment.positive ? <CheckCircle className="h-5 w-5 text-green-500 mr-2" /> : <AlertTriangle className="h-5 w-5 text-red-500 mr-2" />}
                    <p className="font-medium">{treatment.name}</p>
                  </div>
                  <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground mt-1 pl-4">
                    {treatment.effects.map((effect, idx) => <li key={idx}>{effect}</li>)}
                  </ul>
                  {treatment.notes && <p className="text-xs italic text-muted-foreground/80 mt-2">{treatment.notes}</p>}
                </div>
              ))}
            </div>
           </div>
        )}

        {event.notes && event.notes.length > 0 && (
          <div>
            <h4 className="font-semibold text-md mb-2 text-yellow-600 dark:text-yellow-400">Notes Diverses :</h4>
             <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground p-3 bg-muted/50 rounded-md">
              {event.notes.map((note, i) => (
                <li key={i}>{note}</li>
              ))}
            </ul>
          </div>
        )}


        {/* Placeholder for future lab results directly linked to an event if needed */}
        {/* {event.labResults && event.labResults.length > 0 && (
          <div>
            <h4 className="font-semibold text-md mb-2">Résultats de Laboratoire Associés :</h4>
            <p className="text-sm text-muted-foreground">TODO: Display linked lab results</p>
          </div>
        )} */}
      </CardContent>
      {/* Optional Footer
      <CardFooter>
        <p className="text-xs text-muted-foreground">Event recorded on...</p>
      </CardFooter>
      */}
    </Card>
  );
}"

"medical-history-timeline.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/historique/medical-history-timeline.tsx": "// src/components/historique/medical-history-timeline.tsx
import { MedicalEvent } from "@/data/types";
import { MedicalEventCard } from "./medical-event-card";

interface MedicalHistoryTimelineProps {
  events: MedicalEvent[];
}

export function MedicalHistoryTimeline({ events }: MedicalHistoryTimelineProps) {
  // Sort events: by year if number, or keep original order for string "years"
  // This simple sort might need refinement if "year" strings are complex
  const sortedEvents = [...events].sort((a, b) => {
    const yearA = typeof a.year === 'number' ? a.year : Infinity; // Push strings to end or handle differently
    const yearB = typeof b.year === 'number' ? b.year : Infinity;
    if (yearA !== Infinity && yearB !== Infinity) {
      return yearA - yearB;
    }
    // Basic sort for string years like "12 ans", "15 ans" if they are consistent
    if (typeof a.year === 'string' && typeof b.year === 'string') {
        const numA = parseInt(a.year.split(' ')[0]);
        const numB = parseInt(b.year.split(' ')[0]);
        if (!isNaN(numA) && !isNaN(numB)) return numA - numB;
    }
    return 0; // Keep original order for mixed or complex strings
  });


  return (
    <div className="relative pl-8 ">
      {/* Vertical line for the timeline */}
      <div className="absolute left-0 top-0 bottom-0 w-1 bg-border rounded-full ml-[calc(0.375rem-0.5px)]"></div>

      <div className="space-y-12">
        {sortedEvents.map((event, index) => (
          <div key={index} className="relative">
            {/* Dot on the timeline */}
            <div className="absolute -left-[calc(0.375rem+4px)] top-1.5 h-3 w-3 rounded-full bg-primary border-2 border-card"></div>
            <MedicalEventCard event={event} />
          </div>
        ))}
      </div>
    </div>
  );
}"

"lab-report-card.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/laboratoire/lab-report-card.tsx": "// src/components/laboratoire/lab-report-card.tsx
import { LabReport, LabSection as LabSectionType, LabTest } from "@/data/types";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { FileText, CalendarDays, UserCircle, Microscope } from "lucide-react";
import Link from "next/link";
import { getStatusColor, getStatusBadgeColor } from "@/lib/lab-utils";

interface LabReportCardProps {
  report: LabReport;
}

const LabTestRow = ({ test, level = 0 }: { test: LabTest, level?: number }) => (
  <>
    <TableRow className={level > 0 ? "bg-muted/30 hover:bg-muted/50" : ""}>
      <TableCell style={{ paddingLeft: `${1 + level * 1.5}rem` }} className="font-medium py-2.5">
        {test.name}
        {test.comment && <p className="text-xs text-muted-foreground italic mt-0.5">{test.comment}</p>}
      </TableCell>
      <TableCell className={`text-center font-semibold py-2.5 ${getStatusColor(test.status)}`}>
        {test.value !== null && test.value !== undefined ? String(test.value) : "N/A"}
      </TableCell>
      <TableCell className="text-center py-2.5">{test.unit || "---"}</TableCell>
      <TableCell className="text-center py-2.5">{test.referenceRange || "---"}</TableCell>
      <TableCell className="text-center py-2.5">
        {test.status && (
          <Badge variant="outline" className={`text-xs ${getStatusBadgeColor(test.status)}`}>
            {test.status.charAt(0).toUpperCase() + test.status.slice(1)}
          </Badge>
        )}
      </TableCell>
    </TableRow>
    {test.subTests && test.subTests.map((subTest, idx) => (
      <LabTestRow key={`${test.name}-sub-${idx}`} test={subTest} level={level + 1} />
    ))}
  </>
);


const LabSection = ({ section }: { section: LabSectionType }) => (
  <AccordionItem value={section.sectionName} className="border-b border-border">
    <AccordionTrigger className="py-3 text-md font-semibold hover:no-underline text-primary/90">
      <div className="flex items-center">
        <Microscope className="h-4 w-4 mr-2 text-primary/70" />
        {section.sectionName}
      </div>
    </AccordionTrigger>
    <AccordionContent className="pt-2 pb-0">
      {section.tests.length > 0 ? (
        <div className="overflow-x-auto">
          <Table className="min-w-full">
            <TableHeader>
              <TableRow className="bg-muted/40 hover:bg-muted/60">
                <TableHead className="w-2/5 py-2.5">Test</TableHead>
                <TableHead className="text-center py-2.5">Valeur</TableHead>
                <TableHead className="text-center py-2.5">Unité</TableHead>
                <TableHead className="text-center py-2.5">Référence</TableHead>
                <TableHead className="text-center py-2.5">Statut</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {section.tests.map((test, idx) => (
                <LabTestRow key={idx} test={test} />
              ))}
            </TableBody>
          </Table>
        </div>
      ) : (
        <p className="text-sm text-muted-foreground px-4 py-2">Aucun test dans cette section.</p>
      )}
      {section.summary && (
        <p className="text-sm text-muted-foreground italic p-3 mt-2 bg-primary/5 rounded-md">{section.summary}</p>
      )}
    </AccordionContent>
  </AccordionItem>
);

export function LabReportCard({ report }: LabReportCardProps) {
  const reportDate = new Date(report.reportDate);

  // Determine default open accordion items - e.g., sections with abnormal results
  const defaultOpenItems = report.sections
    .filter(section => section.tests.some(test => test.status && test.status !== 'normal' && test.status !== 'negative'))
    .map(section => section.sectionName);

  return (
    <Card className="shadow-md hover:shadow-lg transition-shadow duration-200 overflow-hidden">
      <CardHeader className="bg-card">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2">
          <CardTitle className="text-xl flex items-center text-primary">
            <FileText size={24} className="mr-3 text-primary/80" />
            {report.reportName}
          </CardTitle>
          {report.filePath && (
            <Link href={`/labs/${report.filePath}`} target="_blank" legacyBehavior>
              <a className="text-xs text-primary hover:underline">Voir PDF original</a>
            </Link>
          )}
        </div>
        <div className="flex flex-wrap gap-x-4 gap-y-1 text-xs text-muted-foreground pt-2">
          <div className="flex items-center">
            <CalendarDays size={14} className="mr-1.5" />
            Date: {reportDate.toLocaleDateString('fr-FR', { year: 'numeric', month: 'long', day: 'numeric' })}
          </div>
          <div className="flex items-center">
            <UserCircle size={14} className="mr-1.5" />
            Laboratoire: {report.labName}
          </div>
          {report.doctor && (
            <div className="flex items-center">
              <UserCircle size={14} className="mr-1.5" /> {/* Consider a different icon for doctor */}
              Prescripteur/Valideur: {report.doctor}
            </div>
          )}
        </div>
      </CardHeader>
      <CardContent className="p-0">
        {report.sections.length > 0 ? (
          <Accordion type="multiple" defaultValue={defaultOpenItems} className="w-full">
            {report.sections.map((section, idx) => (
              <LabSection key={idx} section={section} />
            ))}
          </Accordion>
        ) : (
          <p className="p-6 text-muted-foreground">Aucune section de résultats dans ce rapport.</p>
        )}
      </CardContent>
    </Card>
  );
}"

"page.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/laboratoire/page.tsx": "// src/app/laboratoire/page.tsx
import { LabResultsHeader } from "@/components/laboratoire/lab-results-header"; // Keep this
import { LabReportCard } from "@/components/laboratoire/lab-report-card"; // New component
import allLabReportsData from "@/data/lab-results.json";
import { LabReport } from "@/data/types";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { groupLabReportsByYear, getUniqueReportCategories } from "@/lib/lab-utils"; // New utility functions

export default function LabResultsPage() {
  const reports = allLabReportsData as LabReport[];

  // Sort reports by date, most recent first
  const sortedReports = [...reports].sort((a, b) => new Date(b.reportDate).getTime() - new Date(a.reportDate).getTime());

  const reportsByYear = groupLabReportsByYear(sortedReports);
  const categories = getUniqueReportCategories(sortedReports);

  return (
    <div className="space-y-6">
      <LabResultsHeader /> {/* You can enhance this later with filters based on actual data */}

      <Tabs defaultValue="all-time" className="w-full">
        <Card>
          <CardHeader>
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
              <div>
                <CardTitle className="text-2xl">Résultats Détaillés</CardTitle>
                <CardDescription>
                  Consultez l'ensemble de vos rapports d'analyses.
                </CardDescription>
              </div>
              {/* Future: Add date range picker or category filter here that interacts with Tabs or filters sortedReports */}
            </div>
          </CardHeader>
          <CardContent>
            <TabsList className="mb-6 grid w-full grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2">
              <TabsTrigger value="all-time">Tout</TabsTrigger>
              {Object.keys(reportsByYear).sort((a,b) => parseInt(b) - parseInt(a)).map((year) => (
                <TabsTrigger key={year} value={year.toString()}>
                  {year}
                </TabsTrigger>
              ))}
              {/* Optionally, add tabs for categories if useful
              {categories.map((category) => (
                <TabsTrigger key={category} value={category.toLowerCase().replace(/\s+/g, '-')}>
                  {category}
                </TabsTrigger>
              ))}
              */}
            </TabsList>

            <TabsContent value="all-time" className="mt-0 space-y-6">
              {sortedReports.length > 0 ? (
                sortedReports.map((report, index) => (
                  <LabReportCard key={index} report={report} />
                ))
              ) : (
                <p className="text-muted-foreground">Aucun rapport de laboratoire trouvé.</p>
              )}
            </TabsContent>

            {Object.entries(reportsByYear).sort(([yearA], [yearB]) => parseInt(yearB) - parseInt(yearA)).map(([year, yearReports]) => (
              <TabsContent key={year} value={year.toString()} className="mt-0 space-y-6">
                {yearReports.map((report, index) => (
                  <LabReportCard key={`${year}-${index}`} report={report} />
                ))}
              </TabsContent>
            ))}

            {/* Example for category tabs - implement filtering logic if you use this
            {categories.map((category) => {
              const categoryKey = category.toLowerCase().replace(/\s+/g, '-');
              const filteredReports = sortedReports.filter(r =>
                r.sections.some(s => s.sectionName.toLowerCase().includes(category.toLowerCase()))
              );
              return (
                <TabsContent key={categoryKey} value={categoryKey} className="mt-0 space-y-6">
                  {filteredReports.map((report, index) => (
                    <LabReportCard key={`${categoryKey}-${index}`} report={report} />
                  ))}
                </TabsContent>
              );
            })}
            */}
          </CardContent>
        </Card>
      </Tabs>
      {/* Remove the old LabResultChartCard grid if it's no longer needed or repurpose it for summary charts */}
    </div>
  );
}"

"lab-result-chart-card.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/laboratoire/lab-result-chart-card.tsx": ""use client";

import { useState } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  ReferenceLine,
  Area,
  ReferenceArea,
  Brush
} from "recharts";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Calendar } from "lucide-react";
import { format, subMonths, subDays } from "date-fns";

interface LabResultChartCardProps {
  name: string;
  unit: string;
  category: string;
  refRange: string;
}

// Function to generate mock data
const generateMockData = (name: string, refRange: string) => {
  const today = new Date();
  let data = [];

  // Parse the reference range
  let lowerBound, upperBound;
  if (refRange.startsWith("<")) {
    upperBound = parseFloat(refRange.substring(1));
    lowerBound = upperBound * 0.5; // Arbitrary lower bound for visuals
  } else if (refRange.startsWith(">")) {
    lowerBound = parseFloat(refRange.substring(1));
    upperBound = lowerBound * 1.5; // Arbitrary upper bound for visuals
  } else {
    const parts = refRange.split("-");
    lowerBound = parseFloat(parts[0]);
    upperBound = parseFloat(parts[1]);
  }

  const midPoint = (lowerBound + upperBound) / 2;
  const range = upperBound - lowerBound;

  // Generate data points with some variation
  for (let i = 12; i >= 0; i--) {
    const date = subMonths(today, i);
    const formattedDate = format(date, "MMM yyyy");

    // Create some variation, occasionally going out of range
    let baseValue = midPoint + (Math.random() - 0.5) * range * 0.8;

    // Make some values abnormal for visual interest
    if (i === 3 || i === 7) {
      baseValue = upperBound + range * 0.2;
    } else if (i === 5) {
      baseValue = lowerBound - range * 0.1;
    }

    const status = baseValue >= lowerBound && baseValue <= upperBound ? "normal" : "abnormal";

    data.push({
      date: formattedDate,
      value: parseFloat(baseValue.toFixed(1)),
      status,
    });
  }

  return {
    data,
    lowerBound,
    upperBound
  };
};

export function LabResultChartCard({ name, unit, category, refRange }: LabResultChartCardProps) {
  const [dateRange, setDateRange] = useState<string>("all");
  const { data: allData, lowerBound, upperBound } = generateMockData(name, refRange);

  // Filter data based on selected date range
  const getFilteredData = () => {
    const today = new Date();

    if (dateRange === "1w") {
      const weekAgo = subDays(today, 7);
      return allData.filter(item => new Date(item.date) >= weekAgo);
    } else if (dateRange === "1m") {
      const monthAgo = subMonths(today, 1);
      return allData.filter(item => new Date(item.date) >= monthAgo);
    } else if (dateRange === "6m") {
      const sixMonthsAgo = subMonths(today, 6);
      return allData.filter(item => new Date(item.date) >= sixMonthsAgo);
    } else if (dateRange === "1y") {
      const yearAgo = subMonths(today, 12);
      return allData.filter(item => new Date(item.date) >= yearAgo);
    }

    return allData;
  };

  const data = getFilteredData();

  // Determine the latest value and status
  const latestResult = data[data.length - 1];

  // Calculate domain padding for Y-axis
  const yMin = Math.min(...data.map(item => item.value));
  const yMax = Math.max(...data.map(item => item.value));
  const yDomainMin = Math.max(0, Math.floor(yMin - (yMax - yMin) * 0.2));
  const yDomainMax = Math.ceil(yMax + (yMax - yMin) * 0.2);

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-start">
        <div>
          <div className="flex items-center gap-2">
            <h3 className="font-semibold text-lg">{name}</h3>
            <Badge
              variant="outline"
              className={
                latestResult.status === "normal"
                  ? "bg-health-normal-bg text-health-normal"
                  : "bg-health-abnormal-bg text-health-abnormal"
              }
            >
              {latestResult.status === "normal" ? "Normal" : "Abnormal"}
            </Badge>
          </div>
          <div className="flex items-center gap-1 text-sm text-muted-foreground">
            <span>{category}</span>
            <span>•</span>
            <span>Reference range: {refRange} {unit}</span>
          </div>
        </div>

        <div className="flex items-center gap-1.5">
          <div className="text-xl font-bold">
            {latestResult.value}
          </div>
          <div className="text-sm text-muted-foreground">
            {unit}
          </div>
        </div>
      </div>

      <div className="flex items-center justify-between">
        <div className="flex items-center gap-1.5">
          <Button
            variant={dateRange === "1w" ? "default" : "outline"}
            size="sm"
            onClick={() => setDateRange("1w")}
          >
            1w
          </Button>
          <Button
            variant={dateRange === "1m" ? "default" : "outline"}
            size="sm"
            onClick={() => setDateRange("1m")}
          >
            1m
          </Button>
          <Button
            variant={dateRange === "6m" ? "default" : "outline"}
            size="sm"
            onClick={() => setDateRange("6m")}
          >
            6m
          </Button>
          <Button
            variant={dateRange === "1y" ? "default" : "outline"}
            size="sm"
            onClick={() => setDateRange("1y")}
          >
            1y
          </Button>
          <Button
            variant={dateRange === "all" ? "default" : "outline"}
            size="sm"
            onClick={() => setDateRange("all")}
          >
            All
          </Button>
        </div>

        <Button variant="ghost" size="sm">
          <Calendar className="h-4 w-4 mr-2" />
          Custom
        </Button>
      </div>

      <div className="h-72">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={data}
            margin={{ top: 10, right: 0, left: 0, bottom: 20 }}
          >
            <CartesianGrid strokeDasharray="3 3" vertical={false} opacity={0.3} />

            <XAxis
              dataKey="date"
              tick={{ fontSize: 12 }}
              tickLine={false}
            />

            <YAxis
              domain={[yDomainMin, yDomainMax]}
              tick={{ fontSize: 12 }}
              tickLine={false}
              axisLine={false}
              width={40}
            />

            <Tooltip
              content={({ active, payload, label }) => {
                if (active && payload && payload.length) {
                  const data = payload[0].payload;
                  return (
                    <div className="bg-card border shadow-sm p-3 rounded-md">
                      <div className="text-sm font-medium">{label}</div>
                      <div className="mt-1.5 flex items-center gap-2">
                        <div className="font-bold">
                          {data.value} {unit}
                        </div>
                        <Badge
                          variant="outline"
                          className={`text-xs ${
                            data.status === "normal"
                              ? "bg-health-normal-bg text-health-normal"
                              : "bg-health-abnormal-bg text-health-abnormal"
                          }`}
                        >
                          {data.status === "normal" ? "Normal" : "Abnormal"}
                        </Badge>
                      </div>
                    </div>
                  );
                }
                return null;
              }}
            />

            {/* Normal zone background */}
            <ReferenceArea
              y1={lowerBound}
              y2={upperBound}
              fill="hsl(var(--health-normal-bg))"
              fillOpacity={0.3}
            />
            {/* Abnormal lower zone background */}
            <ReferenceArea
              y1={yDomainMin}
              y2={lowerBound}
              fill="hsl(var(--health-abnormal-bg))"
              fillOpacity={0.2}
            />
            {/* Abnormal upper zone background */}
            <ReferenceArea
              y1={upperBound}
              y2={yDomainMax}
              fill="hsl(var(--health-abnormal-bg))"
              fillOpacity={0.2}
            />

            {/* Add reference lines for the bounds */}
            <ReferenceLine
              y={lowerBound}
              stroke="hsl(var(--health-normal))"
              strokeWidth={1}
              strokeDasharray="3 3"
            />
            <ReferenceLine
              y={upperBound}
              stroke="hsl(var(--health-normal))"
              strokeWidth={1}
              strokeDasharray="3 3"
            />

            <Line
              type="monotone"
              dataKey="value"
              stroke="hsl(var(--primary))"
              strokeWidth={2.5}
              dot={({ cx, cy, payload }) => (
                <circle
                  cx={cx}
                  cy={cy}
                  r={4}
                  fill={payload.status === "normal" ? "hsl(var(--health-normal))" : "hsl(var(--health-abnormal))"}
                  stroke="white"
                  strokeWidth={2}
                />
              )}
              activeDot={{ r: 6, strokeWidth: 2, stroke: "white" }}
            />

            <Brush
              dataKey="date"
              height={20}
              stroke="hsl(var(--primary))"
              fill="hsl(var(--background))"
              travellerWidth={10}
              startIndex={Math.max(0, data.length - 6)}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>

      <div className="flex justify-between text-xs text-muted-foreground pt-2">
        <div>
          Last updated: {format(new Date(), "MMM d, yyyy")}
        </div>
        <div>
          {data.length} data points
        </div>
      </div>
    </div>
  );
}
"

"lab-results-header.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/laboratoire/lab-results-header.tsx": ""use client";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, FileText, Download, Filter } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export function LabResultsHeader() {
  return (
    <div className="space-y-4">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold">Laboratoire</h1>
          <p className="text-muted-foreground mt-1">
            View and analyze all your laboratory test results
          </p>
        </div>

        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm">
            <FileText className="h-4 w-4 mr-2" />
            Export PDF
          </Button>
          <Button variant="outline" size="sm">
            <Download className="h-4 w-4 mr-2" />
            Download Data
          </Button>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search lab parameters..."
            className="pl-9"
          />
        </div>

        <div className="flex items-center gap-3">
          <div className="flex items-center gap-2">
            <Filter className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm">Filter by:</span>
          </div>

          <Select defaultValue="all">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Date Range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Time</SelectItem>
              <SelectItem value="1m">Last Month</SelectItem>
              <SelectItem value="3m">Last 3 Months</SelectItem>
              <SelectItem value="6m">Last 6 Months</SelectItem>
              <SelectItem value="1y">Last Year</SelectItem>
            </SelectContent>
          </Select>

          <Select defaultValue="all">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Results</SelectItem>
              <SelectItem value="normal">Normal</SelectItem>
              <SelectItem value="abnormal">Abnormal</SelectItem>
              <SelectItem value="borderline">Borderline</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="flex flex-wrap gap-2">
        <Badge variant="outline" className="bg-card">
          All Lab Tests: 24
        </Badge>
        <Badge variant="outline" className="bg-health-normal-bg text-health-normal">
          Normal: 18
        </Badge>
        <Badge variant="outline" className="bg-health-abnormal-bg text-health-abnormal">
          Abnormal: 4
        </Badge>
        <Badge variant="outline" className="bg-health-caution-bg text-health-caution">
          Borderline: 2
        </Badge>
      </div>
    </div>
  );
}
"

"sheet.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/sheet.tsx": ""use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
"

"skeleton.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/skeleton.tsx": "import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }
"

"switch.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/switch.tsx": ""use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
"

"tabs.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/tabs.tsx": ""use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
"

"tooltip.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/tooltip.tsx": ""use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
"

"alert.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/alert.tsx": "import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
"

"avatar.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/avatar.tsx": ""use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
"

"badge.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/badge.tsx": "import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
"

"button.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/button.tsx": "import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
"

"calendar.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/calendar.tsx": ""use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
"

"card.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/card.tsx": "import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
"

"checkbox.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/checkbox.tsx": ""use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
"

"dialog.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/dialog.tsx": ""use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
"

"dropdown-menu.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/dropdown-menu.tsx": ""use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
"

"hover-card.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/hover-card.tsx": ""use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
"

"input.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/input.tsx": "import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
"

"popover.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/popover.tsx": ""use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
"

"progress.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/progress.tsx": ""use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

type ProgressProps = React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & {
  indicatorClassName?: string
}

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  ProgressProps
>(({ className, value, indicatorClassName, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className={cn(
        "h-full w-full flex-1 bg-primary transition-all",
        indicatorClassName
      )}
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
"

"select.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/select.tsx": ""use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
"

"separator.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/ui/separator.tsx": ""use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
"

"recent-lab-results.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/dashboard/recent-lab-results.tsx": ""use client";

import {
  LineChart,
  Line,
  ResponsiveContainer,
  XAxis,
  YAxis,
  Tooltip
} from "recharts";
import { Badge } from "@/components/ui/badge";
import { Activity, TrendingDown, TrendingUp } from "lucide-react";

// Mock data for lab results
const mockLabResults = [
  {
    name: "Blood Glucose",
    unit: "mg/dL",
    value: 95,
    status: "normal",
    refRange: "70-99",
    change: "stable",
    data: [
      { date: "Jan 1", value: 92 },
      { date: "Feb 1", value: 88 },
      { date: "Mar 1", value: 95 },
      { date: "Apr 1", value: 90 },
      { date: "May 1", value: 95 },
    ],
  },
  {
    name: "Cholesterol, Total",
    unit: "mg/dL",
    value: 210,
    status: "abnormal",
    refRange: "<200",
    change: "up",
    data: [
      { date: "Jan 1", value: 195 },
      { date: "Feb 1", value: 200 },
      { date: "Mar 1", value: 204 },
      { date: "Apr 1", value: 208 },
      { date: "May 1", value: 210 },
    ],
  },
  {
    name: "HDL Cholesterol",
    unit: "mg/dL",
    value: 62,
    status: "normal",
    refRange: ">40",
    change: "up",
    data: [
      { date: "Jan 1", value: 55 },
      { date: "Feb 1", value: 56 },
      { date: "Mar 1", value: 58 },
      { date: "Apr 1", value: 60 },
      { date: "May 1", value: 62 },
    ],
  },
  {
    name: "Ferritine",
    unit: "ng/mL",
    value: 38,
    status: "caution",
    refRange: "20-250",
    change: "down",
    data: [
      { date: "Jan 1", value: 52 },
      { date: "Feb 1", value: 48 },
      { date: "Mar 1", value: 45 },
      { date: "Apr 1", value: 40 },
      { date: "May 1", value: 38 },
    ],
  },
];

export function RecentLabResults() {
  return (
    <div className="space-y-5">
      {mockLabResults.map((result) => (
        <div key={result.name} className="flex items-center gap-4 p-3 rounded-lg border bg-card">
          <div className="min-w-48">
            <div className="flex items-center gap-2">
              <span className="font-medium">{result.name}</span>
              <Badge
                variant="outline"
                className={`
                  ${result.status === "normal" ? "bg-health-normal-bg text-health-normal" :
                    result.status === "abnormal" ? "bg-health-abnormal-bg text-health-abnormal" :
                    "bg-health-caution-bg text-health-caution"}
                `}
              >
                {result.status === "normal" ? "Normal" :
                 result.status === "abnormal" ? "Abnormal" :
                 "Borderline"}
              </Badge>
            </div>
            <div className="flex items-center gap-1.5 mt-1 text-sm">
              <span className="font-semibold">{result.value} {result.unit}</span>
              <span className="text-muted-foreground">({result.refRange})</span>

              {result.change === "up" && <TrendingUp className="h-4 w-4 text-health-abnormal" />}
              {result.change === "down" && <TrendingDown className="h-4 w-4 text-health-caution" />}
              {result.change === "stable" && <Activity className="h-4 w-4 text-health-normal" />}
            </div>
          </div>

          <div className="h-14 flex-1">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={result.data}>
                <XAxis
                  dataKey="date"
                  tick={false}
                  axisLine={false}
                  tickLine={false}
                />
                <YAxis
                  hide
                  domain={['dataMin - 10', 'dataMax + 10']}
                />
                <Tooltip
                  content={({ active, payload, label }) => {
                    if (active && payload && payload.length) {
                      return (
                        <div className="bg-popover border shadow-sm p-2 rounded-md text-xs">
                          <p>{`${label}: ${payload[0].value} ${result.unit}`}</p>
                        </div>
                      );
                    }
                    return null;
                  }}
                />
                <Line
                  type="monotone"
                  dataKey="value"
                  stroke={
                    result.status === "normal" ? "hsl(var(--health-normal))" :
                    result.status === "abnormal" ? "hsl(var(--health-abnormal))" :
                    "hsl(var(--health-caution))"
                  }
                  strokeWidth={2.5}
                  dot
                  activeDot={{ r: 5 }}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      ))}
    </div>
  );
}
"

"recent-symptoms.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/dashboard/recent-symptoms.tsx": ""use client";

import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { format } from "date-fns";
import { Calendar } from "lucide-react";

// Mock data for symptoms
const mockSymptoms = [
  {
    date: new Date(2025, 4, 16),
    symptoms: [
      { name: "Headache", severity: "Moderate", duration: "2 hours" },
      { name: "Fatigue", severity: "Mild", duration: "All day" },
    ],
    notes: "Started after lunch, might be related to new medication",
    intensity: "moderate",
  },
  {
    date: new Date(2025, 4, 14),
    symptoms: [
      { name: "Muscle pain", severity: "Mild", duration: "Morning" },
      { name: "Dizziness", severity: "Mild", duration: "Brief episodes" },
    ],
    notes: "Felt better after rest",
    intensity: "mild",
  },
  {
    date: new Date(2025, 4, 10),
    symptoms: [
      { name: "Headache", severity: "Severe", duration: "4 hours" },
      { name: "Nausea", severity: "Moderate", duration: "2 hours" },
      { name: "Sensitivity to light", severity: "Severe", duration: "During headache" },
    ],
    notes: "Migraine episode, took prescribed medication",
    intensity: "severe",
  },
];

export function RecentSymptoms() {
  return (
    <div className="space-y-4">
      {mockSymptoms.map((entry, index) => (
        <div
          key={index}
          className={`
            p-4 rounded-lg border
            ${entry.intensity === "mild" ? "bg-health-normal-bg border-health-normal/20" :
              entry.intensity === "moderate" ? "bg-health-caution-bg border-health-caution/20" :
              "bg-health-abnormal-bg border-health-abnormal/20"}
          `}
        >
          <div className="flex items-center gap-2 mb-3">
            <Calendar className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm font-medium">
              {format(entry.date, "EEEE, MMMM d, yyyy")}
            </span>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <div>
              <h4 className="text-sm font-medium mb-2">Symptoms Reported:</h4>
              <div className="flex flex-wrap gap-2">
                {entry.symptoms.map((symptom, idx) => (
                  <Badge
                    key={idx}
                    variant="outline"
                    className={`
                      ${symptom.severity === "Mild" ? "bg-health-normal-bg text-health-normal border-health-normal/30" :
                        symptom.severity === "Moderate" ? "bg-health-caution-bg text-health-caution border-health-caution/30" :
                        "bg-health-abnormal-bg text-health-abnormal border-health-abnormal/30"}
                    `}
                  >
                    {symptom.name} ({symptom.severity})
                  </Badge>
                ))}
              </div>
            </div>

            <div>
              <h4 className="text-sm font-medium mb-2">Notes:</h4>
              <p className="text-sm text-muted-foreground">{entry.notes}</p>
            </div>
          </div>
        </div>
      ))}

      <div className="flex justify-center">
        <Badge variant="outline" className="cursor-pointer">
          View All Symptoms
        </Badge>
      </div>
    </div>
  );
}
"

"upcoming-reminders.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/dashboard/upcoming-reminders.tsx": ""use client";

import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { format, isToday, addDays } from "date-fns";
import { Pill, CalendarClock, AlertCircle } from "lucide-react";

// Mock data for reminders
const mockReminders = [
  {
    type: "medication",
    name: "Lisinopril",
    dosage: "10mg",
    instruction: "Once daily",
    date: new Date(),
    time: "8:00 AM",
    refillRemaining: 5,
  },
  {
    type: "medication",
    name: "Atorvastatin",
    dosage: "20mg",
    instruction: "Once daily at bedtime",
    date: new Date(),
    time: "9:00 PM",
    refillRemaining: 12,
  },
  {
    type: "appointment",
    name: "Dr. Johnson",
    specialty: "Cardiologist",
    date: addDays(new Date(), 3),
    time: "2:30 PM",
    location: "Medical Center, Room 304",
  },
  {
    type: "labwork",
    name: "Quarterly Blood Panel",
    date: addDays(new Date(), 7),
    time: "10:00 AM",
    location: "Lab Services, 2nd Floor",
    fasting: true,
  },
];

export function UpcomingReminders() {
  return (
    <div className="space-y-4">
      {mockReminders.map((reminder, index) => {
        const isUpcoming = isToday(reminder.date);
        const dateFormatted = format(reminder.date, "MMM d");

        return (
          <div key={index} className="flex items-start gap-3 p-2">
            {reminder.type === "medication" && (
              <div className="bg-medical-teal-light rounded-full p-2">
                <Pill className="h-4 w-4 text-medical-teal" />
              </div>
            )}
            {reminder.type === "appointment" && (
              <div className="bg-medical-indigo-light rounded-full p-2">
                <CalendarClock className="h-4 w-4 text-medical-indigo" />
              </div>
            )}
            {reminder.type === "labwork" && (
              <div className="bg-medical-purple-light rounded-full p-2">
                <AlertCircle className="h-4 w-4 text-medical-purple" />
              </div>
            )}

            <div className="flex-1">
              <div className="flex items-center justify-between">
                <h4 className="font-medium text-sm">
                  {reminder.name}
                  {reminder.type === "medication" && (
                    <span className="text-muted-foreground ml-1">{reminder.dosage}</span>
                  )}
                </h4>
                <Badge
                  variant="outline"
                  className={`text-xs ${isUpcoming ? "bg-health-caution-bg text-health-caution" : "bg-muted"}`}
                >
                  {isUpcoming ? "Today" : dateFormatted}
                </Badge>
              </div>

              <div className="text-xs text-muted-foreground mt-1">
                {reminder.time} • {reminder.type === "medication"
                  ? reminder.instruction
                  : reminder.location
                }
              </div>

              {reminder.type === "medication" && (
                <div className="text-xs mt-2">
                  <span className={reminder.refillRemaining <= 5 ? "text-health-abnormal" : ""}>
                    Refills remaining: {reminder.refillRemaining}
                  </span>
                </div>
              )}

              {reminder.type === "labwork" && reminder.fasting && (
                <div className="text-xs mt-2 text-health-caution">
                  Fasting required (8 hours)
                </div>
              )}
            </div>
          </div>
        );
      })}

      <Separator />

      <div className="flex justify-center pt-2">
        <Badge variant="outline" className="cursor-pointer">
          View All Reminders
        </Badge>
      </div>
    </div>
  );
}
"

"dashboard-header.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/dashboard/dashboard-header.tsx": ""use client";

import { Badge } from "@/components/ui/badge";
import { format } from "date-fns";
import { Bell } from "lucide-react";
import { Button } from "@/components/ui/button";

export function DashboardHeader() {
  const today = new Date();
  const formattedDate = format(today, "EEEE, MMMM d, yyyy");

  return (
    <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
      <div>
        <h1 className="text-3xl font-bold">Vue d'Ensemble</h1>
        <div className="flex items-center mt-1">
          <div className="text-sm text-muted-foreground">
            {formattedDate}
          </div>
          <span className="mx-2 text-muted-foreground">•</span>
          <Badge variant="outline" className="font-medium bg-medical-blue-light text-medical-blue">
            Patient: John Doe
          </Badge>
        </div>
      </div>

      <div className="flex items-center gap-4">
        <div className="relative">
          <Button variant="outline" size="icon">
            <Bell size={18} />
            <span className="absolute -top-1 -right-1 w-4 h-4 bg-health-abnormal text-white text-xs rounded-full flex items-center justify-center">
              3
            </span>
          </Button>
        </div>
        <div className="flex flex-col">
          <div className="font-semibold">Dr. Sarah Johnson</div>
          <div className="text-sm text-muted-foreground">Last update: May 15, 2025</div>
        </div>
      </div>
    </div>
  );
}
"

"health-summary.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/dashboard/health-summary.tsx": ""use client";

import { Progress } from "@/components/ui/progress";
import { BarChart3, Heart, BarChart2, Activity } from "lucide-react";

export function HealthSummary() {
  const healthMetrics = [
    {
      name: "Blood Pressure",
      icon: <Activity className="h-5 w-5 text-medical-blue" />,
      status: "Normal",
      value: "120/80 mmHg",
      progress: 75,
      progressColor: "bg-health-normal",
    },
    {
      name: "Heart Rate",
      icon: <Heart className="h-5 w-5 text-health-abnormal" />,
      status: "Elevated",
      value: "88 bpm",
      progress: 60,
      progressColor: "bg-health-caution",
    },
    {
      name: "BMI",
      icon: <BarChart3 className="h-5 w-5 text-medical-teal" />,
      status: "Normal",
      value: "22.5",
      progress: 85,
      progressColor: "bg-health-normal",
    },
    {
      name: "Activity Level",
      icon: <BarChart2 className="h-5 w-5 text-medical-indigo" />,
      status: "Below Target",
      value: "65%",
      progress: 65,
      progressColor: "bg-health-caution",
    },
  ];

  return (
    <div className="space-y-5">
      {healthMetrics.map((metric) => (
        <div key={metric.name} className="space-y-1.5">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {metric.icon}
              <div className="font-medium">{metric.name}</div>
            </div>
            <div className="text-sm font-medium">{metric.value}</div>
          </div>
          <Progress
            value={metric.progress}
            className="h-2"
            indicatorClassName={metric.progressColor}
          />
          <div className="text-xs text-muted-foreground">
            Status: <span className="font-medium">{metric.status}</span>
          </div>
        </div>
      ))}

      <div className="pt-4 border-t mt-4">
        <div className="text-sm font-medium mb-3">Health Score</div>
        <div className="flex items-center justify-center">
          <div className="relative w-24 h-24 rounded-full bg-gradient-to-r from-health-caution via-health-normal to-health-normal flex items-center justify-center">
            <div className="bg-card w-18 h-18 rounded-full flex items-center justify-center">
              <div className="text-2xl font-bold">82</div>
            </div>
          </div>
        </div>
        <div className="text-center mt-2 text-sm text-muted-foreground">Good</div>
      </div>
    </div>
  );
}
"

"prescriptions-header.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/prescriptions/prescriptions-header.tsx": ""use client";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Plus, Filter, Calendar } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export function PrescriptionsHeader() {
  return (
    <div className="space-y-4">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold">Prescriptions</h1>
          <p className="text-muted-foreground mt-1">
            Manage and track your medication prescriptions
          </p>
        </div>

        <div className="flex items-center gap-2">
          <Button>
            <Plus className="h-4 w-4 mr-2" />
            Add Prescription
          </Button>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search prescriptions..."
            className="pl-9"
          />
        </div>

        <div className="flex items-center gap-3">
          <div className="flex items-center gap-2">
            <Filter className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm">Filter by:</span>
          </div>

          <Select defaultValue="all">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Date Range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Time</SelectItem>
              <SelectItem value="active">Active Only</SelectItem>
              <SelectItem value="3m">Last 3 Months</SelectItem>
              <SelectItem value="6m">Last 6 Months</SelectItem>
              <SelectItem value="1y">Last Year</SelectItem>
            </SelectContent>
          </Select>

          <Select defaultValue="all">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Prescription Type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Types</SelectItem>
              <SelectItem value="ald">ALD</SelectItem>
              <SelectItem value="standard">Standard</SelectItem>
              <SelectItem value="intercurrent">Intercurrent</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="flex flex-wrap gap-2">
        <Badge variant="outline" className="bg-card cursor-pointer">
          All Prescriptions: 12
        </Badge>
        <Badge variant="outline" className="bg-medical-blue-light text-medical-blue cursor-pointer">
          Active: 4
        </Badge>
        <Badge variant="outline" className="bg-medical-teal-light text-medical-teal cursor-pointer">
          Expired: 8
        </Badge>
      </div>
    </div>
  );
}
"

"prescriptions-list.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/prescriptions/prescriptions-list.tsx": ""use client";

import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import {
  ChevronDown,
  ChevronUp,
  Calendar,
  User,
  Phone,
  Mail,
  FileText,
  Clock,
  Pill,
  AlertCircle,
  ThumbsUp,
  ThumbsDown
} from "lucide-react";
import { format, differenceInDays } from "date-fns";

// Mock data for prescriptions
const mockPrescriptions = [
  {
    id: "p1",
    date: new Date(2025, 4, 15),
    expirationDate: new Date(2025, 7, 15),
    type: "ALD",
    doctor: {
      name: "Dr. Sarah Johnson",
      specialty: "Cardiologist",
      contact: "sarah.johnson@medical.com",
      phone: "+33 1 23 45 67 89"
    },
    medications: [
      {
        name: "Lisinopril",
        dosage: "10mg",
        instructions: "Take 1 tablet by mouth once daily",
        duration: "3 months",
        refills: 2
      },
      {
        name: "Atorvastatin",
        dosage: "20mg",
        instructions: "Take 1 tablet by mouth at bedtime",
        duration: "3 months",
        refills: 2
      }
    ],
    notes: "For management of hypertension and high cholesterol. Schedule follow-up in 3 months.",
    effects: [
      { type: "positive", description: "Blood pressure improved" },
      { type: "negative", description: "Mild muscle aches" }
    ]
  },
  {
    id: "p2",
    date: new Date(2025, 3, 2),
    expirationDate: new Date(2025, 4, 2),
    type: "Intercurrent",
    doctor: {
      name: "Dr. Michael Chen",
      specialty: "General Practitioner",
      contact: "michael.chen@medical.com",
      phone: "+33 1 98 76 54 32"
    },
    medications: [
      {
        name: "Amoxicillin",
        dosage: "500mg",
        instructions: "Take 1 capsule by mouth three times daily",
        duration: "7 days",
        refills: 0
      },
      {
        name: "Ibuprofen",
        dosage: "400mg",
        instructions: "Take 1 tablet by mouth every 6 hours as needed for pain",
        duration: "As needed",
        refills: 0
      }
    ],
    notes: "For treatment of sinus infection. Finish all antibiotics as prescribed.",
    effects: [
      { type: "positive", description: "Symptoms resolved after 5 days" },
      { type: "negative", description: "Mild stomach discomfort" }
    ]
  },
  {
    id: "p3",
    date: new Date(2025, 1, 10),
    expirationDate: new Date(2025, 4, 10),
    type: "Standard",
    doctor: {
      name: "Dr. Emily Rodriguez",
      specialty: "Endocrinologist",
      contact: "emily.rodriguez@medical.com",
      phone: "+33 1 45 67 89 01"
    },
    medications: [
      {
        name: "Levothyroxine",
        dosage: "50mcg",
        instructions: "Take 1 tablet by mouth once daily, 30 minutes before breakfast",
        duration: "3 months",
        refills: 3
      }
    ],
    notes: "For hypothyroidism management. Blood work scheduled for follow-up.",
    effects: [
      { type: "positive", description: "Energy levels improved" },
      { type: "negative", description: "No adverse effects" }
    ]
  },
];

export function PrescriptionsList() {
  const [expandedIds, setExpandedIds] = useState<string[]>([]);

  const toggleExpand = (id: string) => {
    setExpandedIds(prev =>
      prev.includes(id)
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  const isExpanded = (id: string) => expandedIds.includes(id);

  const getPrescriptionStatus = (expirationDate: Date) => {
    const today = new Date();
    const daysRemaining = differenceInDays(expirationDate, today);

    if (daysRemaining < 0) {
      return { status: "expired", label: "Expired", className: "bg-muted" };
    } else if (daysRemaining <= 7) {
      return { status: "expiring", label: "Expiring Soon", className: "bg-health-caution-bg text-health-caution" };
    } else {
      return { status: "active", label: "Active", className: "bg-health-normal-bg text-health-normal" };
    }
  };

  return (
    <div className="space-y-4">
      {mockPrescriptions.map((prescription) => {
        const { status, label, className } = getPrescriptionStatus(prescription.expirationDate);

        return (
          <div key={prescription.id} className="border rounded-lg overflow-hidden bg-card">
            <div
              className="p-4 flex justify-between items-center cursor-pointer"
              onClick={() => toggleExpand(prescription.id)}
            >
              <div className="flex flex-col md:flex-row md:items-center gap-1 md:gap-4">
                <div className="font-medium">
                  {format(prescription.date, "MMM d, yyyy")}
                </div>
                <div className="flex items-center gap-2">
                  <Badge variant="outline">{prescription.type}</Badge>
                  <Badge variant="outline" className={className}>
                    {label}
                  </Badge>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <div className="hidden md:block text-sm text-muted-foreground">
                  {prescription.medications.length} medication{prescription.medications.length !== 1 ? 's' : ''}
                </div>
                <Button variant="ghost" size="icon">
                  {isExpanded(prescription.id) ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
                </Button>
              </div>
            </div>

            {isExpanded(prescription.id) && (
              <div className="p-4 pt-0">
                <Separator className="mb-4" />

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <h4 className="font-medium text-sm flex items-center gap-2">
                        <User size={16} className="text-muted-foreground" />
                        Prescribing Doctor
                      </h4>
                      <div className="text-sm p-3 rounded-md bg-muted/50">
                        <div className="font-medium">{prescription.doctor.name}</div>
                        <div className="text-muted-foreground">{prescription.doctor.specialty}</div>
                        <div className="flex items-center gap-1 mt-2 text-xs">
                          <Mail size={12} className="text-muted-foreground" />
                          {prescription.doctor.contact}
                        </div>
                        <div className="flex items-center gap-1 mt-1 text-xs">
                          <Phone size={12} className="text-muted-foreground" />
                          {prescription.doctor.phone}
                        </div>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <h4 className="font-medium text-sm flex items-center gap-2">
                        <Calendar size={16} className="text-muted-foreground" />
                        Prescription Details
                      </h4>
                      <div className="text-sm grid grid-cols-2 gap-3 p-3 rounded-md bg-muted/50">
                        <div>
                          <div className="text-muted-foreground">Issue Date</div>
                          <div>{format(prescription.date, "MMMM d, yyyy")}</div>
                        </div>
                        <div>
                          <div className="text-muted-foreground">Expiration Date</div>
                          <div>{format(prescription.expirationDate, "MMMM d, yyyy")}</div>
                        </div>
                        <div>
                          <div className="text-muted-foreground">Type</div>
                          <div>{prescription.type}</div>
                        </div>
                        <div>
                          <div className="text-muted-foreground">Status</div>
                          <div>{label}</div>
                        </div>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <h4 className="font-medium text-sm flex items-center gap-2">
                        <FileText size={16} className="text-muted-foreground" />
                        Notes
                      </h4>
                      <div className="text-sm p-3 rounded-md bg-muted/50">
                        {prescription.notes}
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div className="space-y-2">
                      <h4 className="font-medium text-sm flex items-center gap-2">
                        <Pill size={16} className="text-muted-foreground" />
                        Medications ({prescription.medications.length})
                      </h4>
                      {prescription.medications.map((medication, idx) => (
                        <div key={idx} className="text-sm p-3 rounded-md bg-medical-blue-light/20 border border-medical-blue/10">
                          <div className="flex items-center justify-between">
                            <div className="font-medium">{medication.name}</div>
                            <Badge variant="outline">{medication.dosage}</Badge>
                          </div>
                          <div className="mt-2 space-y-1">
                            <div className="flex items-start gap-1">
                              <Clock size={14} className="text-muted-foreground mt-0.5 shrink-0" />
                              <div>{medication.instructions}</div>
                            </div>
                            <div className="flex items-start gap-1">
                              <Calendar size={14} className="text-muted-foreground mt-0.5 shrink-0" />
                              <div>Duration: {medication.duration}</div>
                            </div>
                            <div className="flex items-start gap-1">
                              <Pill size={14} className="text-muted-foreground mt-0.5 shrink-0" />
                              <div>Refills remaining: {medication.refills}</div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>

                    <div className="space-y-2">
                      <h4 className="font-medium text-sm flex items-center gap-2">
                        <AlertCircle size={16} className="text-muted-foreground" />
                        Reported Effects
                      </h4>
                      {prescription.effects.map((effect, idx) => (
                        <div
                          key={idx}
                          className={`text-sm p-3 rounded-md ${
                            effect.type === "positive"
                              ? "bg-health-normal-bg border border-health-normal/10"
                              : "bg-health-abnormal-bg border border-health-abnormal/10"
                          }`}
                        >
                          <div className="flex items-center gap-2">
                            {effect.type === "positive" ? (
                              <ThumbsUp size={16} className="text-health-normal" />
                            ) : (
                              <ThumbsDown size={16} className="text-health-abnormal" />
                            )}
                            <div>{effect.description}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
}
"

"theme-provider.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/providers/theme-provider.tsx": ""use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return (
    <NextThemesProvider {...props}>
      {children}
    </NextThemesProvider>
  );
}
"

"symptoms-header.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/symptomes/symptoms-header.tsx": ""use client";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Plus, Filter, Calendar, BarChart } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export function SymptomsHeader() {
  return (
    <div className="space-y-4">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold">Symptômes</h1>
          <p className="text-muted-foreground mt-1">
            Track and analyze your symptoms over time
          </p>
        </div>

        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm">
            <BarChart className="h-4 w-4 mr-2" />
            View Trends
          </Button>
          <Button>
            <Plus className="h-4 w-4 mr-2" />
            Log Symptom
          </Button>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search symptoms..."
            className="pl-9"
          />
        </div>

        <div className="flex items-center gap-3">
          <div className="flex items-center gap-2">
            <Filter className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm">Filter by:</span>
          </div>

          <Select defaultValue="all">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Date Range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Time</SelectItem>
              <SelectItem value="1w">Past Week</SelectItem>
              <SelectItem value="1m">Past Month</SelectItem>
              <SelectItem value="3m">Past 3 Months</SelectItem>
              <SelectItem value="6m">Past 6 Months</SelectItem>
            </SelectContent>
          </Select>

          <Select defaultValue="all">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Severities</SelectItem>
              <SelectItem value="mild">Mild</SelectItem>
              <SelectItem value="moderate">Moderate</SelectItem>
              <SelectItem value="severe">Severe</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="flex flex-wrap gap-2">
        <Badge variant="outline" className="bg-card cursor-pointer">
          Total Entries: 28
        </Badge>
        <Badge variant="outline" className="bg-health-normal-bg text-health-normal cursor-pointer">
          Mild: 14
        </Badge>
        <Badge variant="outline" className="bg-health-caution-bg text-health-caution cursor-pointer">
          Moderate: 10
        </Badge>
        <Badge variant="outline" className="bg-health-abnormal-bg text-health-abnormal cursor-pointer">
          Severe: 4
        </Badge>
      </div>
    </div>
  );
}
"

"symptoms-log.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/components/symptomes/symptoms-log.tsx": ""use client";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { format, isToday, isYesterday, isSameMonth, isSameYear, isSameWeek } from "date-fns";
import {
  Calendar,
  Clock,
  AlertCircle,
  MessageSquare,
  ThumbsUp,
  ThumbsDown,
  ArrowUp,
  ArrowDown,
  ChevronDown,
  ChevronUp,
  Pencil
} from "lucide-react";
import { Pill } from "lucide-react";

// Mock data for symptoms log
const mockSymptoms = [
  {
    id: "s1",
    date: new Date(2025, 4, 19, 10, 30), // Today
    symptoms: [
      { name: "Headache", severity: "Moderate", duration: "2 hours" },
      { name: "Fatigue", severity: "Mild", duration: "All day" },
    ],
    triggers: ["Stress", "Poor sleep"],
    notes: "Started after morning meeting, improved after lunch and rest",
    medications: ["Ibuprofen 400mg - one dose"],
    impact: {
      work: "Moderate",
      daily: "Mild",
      mood: "Moderate"
    }
  },
  {
    id: "s2",
    date: new Date(2025, 4, 18, 14, 15), // Yesterday
    symptoms: [
      { name: "Joint pain", severity: "Mild", duration: "Morning only" },
      { name: "Stiffness", severity: "Mild", duration: "1 hour" },
    ],
    triggers: ["Cold weather", "Exercise"],
    notes: "Mostly affecting knees and ankles, improved with movement",
    medications: ["None taken"],
    impact: {
      work: "Mild",
      daily: "Mild",
      mood: "None"
    }
  },
  {
    id: "s3",
    date: new Date(2025, 4, 15, 19, 45), // Few days ago
    symptoms: [
      { name: "Headache", severity: "Severe", duration: "5 hours" },
      { name: "Nausea", severity: "Moderate", duration: "3 hours" },
      { name: "Light sensitivity", severity: "Severe", duration: "During headache" },
    ],
    triggers: ["Bright screens", "Missed meal"],
    notes: "Migraine attack, had to lie down in dark room, missed dinner",
    medications: ["Sumatriptan 50mg - one dose", "Ondansetron 4mg - one dose"],
    impact: {
      work: "Severe",
      daily: "Severe",
      mood: "Moderate"
    }
  },
  {
    id: "s4",
    date: new Date(2025, 4, 10, 8, 30), // Last week
    symptoms: [
      { name: "Cough", severity: "Moderate", duration: "All day" },
      { name: "Sore throat", severity: "Mild", duration: "Morning" },
    ],
    triggers: ["Allergies", "Dry air"],
    notes: "Productive cough in the morning, dry in afternoon",
    medications: ["Cough syrup - 10ml twice", "Throat lozenges - 3 throughout day"],
    impact: {
      work: "Mild",
      daily: "Mild",
      mood: "Mild"
    }
  },
  {
    id: "s5",
    date: new Date(2025, 3, 28, 22, 0), // Last month
    symptoms: [
      { name: "Insomnia", severity: "Moderate", duration: "All night" },
      { name: "Anxiety", severity: "Moderate", duration: "Evening" },
    ],
    triggers: ["Work stress", "Caffeine late in day"],
    notes: "Couldn't fall asleep until 3am, racing thoughts about upcoming presentation",
    medications: ["Melatonin 3mg - one dose"],
    impact: {
      work: "Moderate",
      daily: "Moderate",
      mood: "Moderate"
    }
  },
];

// Function to group logs by date section
const getDateSection = (date: Date) => {
  const now = new Date();

  if (isToday(date)) return "Today";
  if (isYesterday(date)) return "Yesterday";
  if (isSameWeek(date, now)) return "This Week";
  if (isSameMonth(date, now)) return "This Month";
  if (isSameYear(date, now)) return format(date, "MMMM yyyy");
  return format(date, "yyyy");
};

// Group logs by date section
const groupedLogs = mockSymptoms.reduce<Record<string, typeof mockSymptoms>>((groups, log) => {
  const section = getDateSection(log.date);
  if (!groups[section]) groups[section] = [];
  groups[section].push(log);
  return groups;
}, {});

export function SymptomsLog() {
  return (
    <div className="space-y-8">
      {Object.entries(groupedLogs).map(([section, logs]) => (
        <div key={section} className="space-y-4">
          <h3 className="text-lg font-medium">{section}</h3>

          {logs.map((log) => {
            // Determine overall severity
            const severities = log.symptoms.map(s => s.severity);
            const maxSeverity = severities.includes("Severe") ? "Severe" :
                               severities.includes("Moderate") ? "Moderate" : "Mild";

            return (
              <div
                key={log.id}
                className={`
                  border rounded-lg overflow-hidden bg-card
                  ${maxSeverity === "Mild" ? "border-health-normal/30" :
                    maxSeverity === "Moderate" ? "border-health-caution/30" :
                    "border-health-abnormal/30"}
                `}
              >
                <div className="p-4">
                  <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3">
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm font-medium">
                        {format(log.date, "EEEE, MMMM d, yyyy")}
                      </span>
                      <span className="text-xs text-muted-foreground">
                        {format(log.date, "h:mm a")}
                      </span>
                    </div>

                    <div className="flex items-center gap-2">
                      <Badge
                        variant="outline"
                        className={`
                          ${maxSeverity === "Mild" ? "bg-health-normal-bg text-health-normal" :
                            maxSeverity === "Moderate" ? "bg-health-caution-bg text-health-caution" :
                            "bg-health-abnormal-bg text-health-abnormal"}
                        `}
                      >
                        {maxSeverity} Severity
                      </Badge>

                      <Button variant="ghost" size="icon">
                        <Pencil size={16} />
                      </Button>
                    </div>
                  </div>

                  <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <div>
                        <h4 className="text-sm font-medium mb-2 flex items-center gap-1.5">
                          <AlertCircle size={16} className="text-muted-foreground" />
                          Symptoms Reported
                        </h4>
                        <div className="flex flex-wrap gap-1.5">
                          {log.symptoms.map((symptom, idx) => (
                            <Badge
                              key={idx}
                              variant="outline"
                              className={`
                                ${symptom.severity === "Mild" ? "bg-health-normal-bg text-health-normal border-health-normal/30" :
                                  symptom.severity === "Moderate" ? "bg-health-caution-bg text-health-caution border-health-caution/30" :
                                  "bg-health-abnormal-bg text-health-abnormal border-health-abnormal/30"}
                              `}
                            >
                              {symptom.name} ({symptom.severity}, {symptom.duration})
                            </Badge>
                          ))}
                        </div>
                      </div>

                      <div>
                        <h4 className="text-sm font-medium mb-2 flex items-center gap-1.5">
                          <MessageSquare size={16} className="text-muted-foreground" />
                          Notes
                        </h4>
                        <p className="text-sm text-muted-foreground">{log.notes}</p>
                      </div>
                    </div>

                    <div className="space-y-4">
                      <div>
                        <h4 className="text-sm font-medium mb-2 flex items-center gap-1.5">
                          <ArrowUp size={16} className="text-muted-foreground" />
                          Potential Triggers
                        </h4>
                        <div className="flex flex-wrap gap-1.5">
                          {log.triggers.map((trigger, idx) => (
                            <Badge key={idx} variant="outline" className="bg-medical-blue-light text-medical-blue">
                              {trigger}
                            </Badge>
                          ))}
                        </div>
                      </div>

                      <div>
                        <h4 className="text-sm font-medium mb-2 flex items-center gap-1.5">
                          <Pill size={16} className="text-muted-foreground" />
                          Medications Taken
                        </h4>
                        <ul className="text-sm space-y-1">
                          {log.medications.map((med, idx) => (
                            <li key={idx} className="text-muted-foreground">• {med}</li>
                          ))}
                        </ul>
                      </div>

                      <div>
                        <h4 className="text-sm font-medium mb-2 flex items-center gap-1.5">
                          <ArrowDown size={16} className="text-muted-foreground" />
                          Impact Assessment
                        </h4>
                        <div className="grid grid-cols-3 gap-2 text-sm">
                          <div className="p-2 bg-muted/30 rounded text-center">
                            <div>Work</div>
                            <Badge
                              variant="outline"
                              className={`mt-1 w-full justify-center
                                ${log.impact.work === "Mild" ? "bg-health-normal-bg text-health-normal" :
                                  log.impact.work === "Moderate" ? "bg-health-caution-bg text-health-caution" :
                                  log.impact.work === "Severe" ? "bg-health-abnormal-bg text-health-abnormal" :
                                  "bg-muted"}
                              `}
                            >
                              {log.impact.work}
                            </Badge>
                          </div>
                          <div className="p-2 bg-muted/30 rounded text-center">
                            <div>Daily Activities</div>
                            <Badge
                              variant="outline"
                              className={`mt-1 w-full justify-center
                                ${log.impact.daily === "Mild" ? "bg-health-normal-bg text-health-normal" :
                                  log.impact.daily === "Moderate" ? "bg-health-caution-bg text-health-caution" :
                                  log.impact.daily === "Severe" ? "bg-health-abnormal-bg text-health-abnormal" :
                                  "bg-muted"}
                              `}
                            >
                              {log.impact.daily}
                            </Badge>
                          </div>
                          <div className="p-2 bg-muted/30 rounded text-center">
                            <div>Mood</div>
                            <Badge
                              variant="outline"
                              className={`mt-1 w-full justify-center
                                ${log.impact.mood === "Mild" ? "bg-health-normal-bg text-health-normal" :
                                  log.impact.mood === "Moderate" ? "bg-health-caution-bg text-health-caution" :
                                  log.impact.mood === "Severe" ? "bg-health-abnormal-bg text-health-abnormal" :
                                  "bg-muted"}
                              `}
                            >
                              {log.impact.mood}
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      ))}

      <div className="flex justify-center pt-4">
        <Button variant="outline">
          Load More
        </Button>
      </div>
    </div>
  );
}
"

"lab-utils.ts", "C:/Users/Ben/Downloads/poul-main/poul-main/src/lib/lab-utils.ts": "// src/lib/lab-utils.ts
import { LabReport } from "@/data/types";

export const groupLabReportsByYear = (reports: LabReport[]): Record<string, LabReport[]> => {
  return reports.reduce((acc, report) => {
    const year = new Date(report.reportDate).getFullYear().toString();
    if (!acc[year]) {
      acc[year] = [];
    }
    acc[year].push(report);
    return acc;
  }, {} as Record<string, LabReport[]>);
};

export const getUniqueReportCategories = (reports: LabReport[]): string[] => {
  const categories = new Set<string>();
  reports.forEach(report => {
    report.sections.forEach(section => {
      // A simple way to categorize, you might want more specific logic
      if (section.sectionName.toLowerCase().includes("hématologie")) categories.add("Hématologie");
      else if (section.sectionName.toLowerCase().includes("biochimie")) categories.add("Biochimie");
      else if (section.sectionName.toLowerCase().includes("hormone")) categories.add("Hormones");
      else if (section.sectionName.toLowerCase().includes("vitamine")) categories.add("Vitamines");
      else if (section.sectionName.toLowerCase().includes("immunologie")) categories.add("Immunologie");
      // Add more general categories as needed
    });
  });
  return Array.from(categories).sort();
};

export const getStatusColor = (status?: LabTest["status"]): string => {
  switch (status) {
    case "low":
    case "abnormal":
    case "high":
      return "text-health-abnormal dark:text-health-abnormal"; // or health-caution if preferred for low/high
    case "positive":
        return "text-health-abnormal dark:text-health-abnormal";
    case "borderline":
      return "text-health-caution dark:text-health-caution";
    case "significant":
        return "text-health-caution dark:text-health-caution";
    case "normal":
    case "negative":
      return "text-health-normal dark:text-health-normal";
    default:
      return "text-foreground";
  }
};

export const getStatusBadgeColor = (status?: LabTest["status"]): string => {
  switch (status) {
    case "low":
    case "abnormal":
    case "high":
      return "bg-health-abnormal-bg text-health-abnormal border-health-abnormal/50";
    case "positive":
        return "bg-health-abnormal-bg text-health-abnormal border-health-abnormal/50";
    case "borderline":
      return "bg-health-caution-bg text-health-caution border-health-caution/50";
    case "significant":
        return "bg-health-caution-bg text-health-caution border-health-caution/50";
    case "normal":
    case "negative":
      return "bg-health-normal-bg text-health-normal border-health-normal/50";
    default:
      return "bg-muted text-muted-foreground";
  }
};"

"utils.ts", "C:/Users/Ben/Downloads/poul-main/poul-main/src/lib/utils.ts": "import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
"

"ClientBody.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/app/ClientBody.tsx": ""use client";

import { useEffect } from "react";

export default function ClientBody({
  children,
}: {
  children: React.ReactNode;
}) {
  // Remove any extension-added classes during hydration
  useEffect(() => {
    // This runs only on the client after hydration
    document.body.className = "antialiased";
  }, []);

  return <div className="antialiased">{children}</div>;
}
"

"globals.css", "C:/Users/Ben/Downloads/poul-main/poul-main/src/app/globals.css": "@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Base UI Colors */
    --background: 210 40% 98%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 215 95% 40%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 200 90% 45%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 215 95% 40%;
    --radius: 0.5rem;

    /* Chart Colors */
    --chart-1: 215 95% 40%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;

    /* Health Status Colors */
    --health-normal: 142 76% 36%;
    --health-normal-bg: 142 70% 90%;
    --health-abnormal: 0 84% 60%;
    --health-abnormal-bg: 0 80% 95%;
    --health-caution: 38 92% 50%;
    --health-caution-bg: 38 90% 90%;

    /* Medical-specific palette */
    --medical-blue: 215 95% 40%;
    --medical-blue-light: 215 95% 93%;
    --medical-teal: 173 58% 39%;
    --medical-teal-light: 173 58% 90%;
    --medical-indigo: 240 68% 50%;
    --medical-indigo-light: 240 68% 95%;
    --medical-purple: 270 50% 45%;
    --medical-purple-light: 270 50% 95%;
  }

  .dark {
    /* Base UI Colors - Dark Mode */
    --background: 222 45% 7%;
    --foreground: 210 40% 98%;
    --card: 222 47% 11%;
    --card-foreground: 210 40% 98%;
    --popover: 222 47% 11%;
    --popover-foreground: 210 40% 98%;
    --primary: 215 90% 55%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 200 90% 50%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 215 90% 55%;

    /* Chart Colors - Dark Mode */
    --chart-1: 215 90% 55%;
    --chart-2: 173 60% 45%;
    --chart-3: 197 40% 35%;
    --chart-4: 43 75% 60%;
    --chart-5: 27 85% 60%;

    /* Health Status Colors - Dark Mode */
    --health-normal: 142 70% 45%;
    --health-normal-bg: 142 30% 20%;
    --health-abnormal: 0 70% 50%;
    --health-abnormal-bg: 0 30% 15%;
    --health-caution: 38 85% 45%;
    --health-caution-bg: 38 30% 15%;

    /* Medical-specific palette - Dark Mode */
    --medical-blue: 215 90% 55%;
    --medical-blue-light: 215 30% 20%;
    --medical-teal: 173 60% 45%;
    --medical-teal-light: 173 30% 20%;
    --medical-indigo: 240 60% 60%;
    --medical-indigo-light: 240 30% 20%;
    --medical-purple: 270 50% 60%;
    --medical-purple-light: 270 30% 20%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
"

"layout.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/app/layout.tsx": "import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import ClientBody from "./ClientBody";
import { NewSidebar } from "@/components/new-sidebar";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Personal Medical Dashboard",
  description: "Track and visualize your health data",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className={`${geistSans.variable} ${geistMono.variable}`}>
      <body suppressHydrationWarning className="antialiased min-h-screen">
        <ClientBody>
          <div className="flex h-screen overflow-hidden">
            <NewSidebar />
            <main className="flex-1 overflow-auto p-6">
              {children}
            </main>
          </div>
        </ClientBody>
      </body>
    </html>
  );
}
"

"page.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/app/page.tsx": "import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { DashboardHeader } from "@/components/dashboard/dashboard-header";
import { RecentLabResults } from "@/components/dashboard/recent-lab-results";
import { UpcomingReminders } from "@/components/dashboard/upcoming-reminders";
import { HealthSummary } from "@/components/dashboard/health-summary";
import { RecentSymptoms } from "@/components/dashboard/recent-symptoms";

export default function Dashboard() {
  return (
    <div className="flex flex-col gap-6">
      <DashboardHeader />

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <Card className="col-span-1 lg:col-span-2">
          <CardHeader>
            <CardTitle>Recent Lab Results</CardTitle>
            <CardDescription>Key lab parameters with the most recent results</CardDescription>
          </CardHeader>
          <CardContent>
            <RecentLabResults />
          </CardContent>
        </Card>

        <Card className="col-span-1">
          <CardHeader>
            <CardTitle>Health Summary</CardTitle>
            <CardDescription>Your current health status</CardDescription>
          </CardHeader>
          <CardContent>
            <HealthSummary />
          </CardContent>
        </Card>

        <Card className="col-span-1 lg:col-span-2">
          <CardHeader>
            <CardTitle>Recent Symptoms</CardTitle>
            <CardDescription>Symptoms you've recorded recently</CardDescription>
          </CardHeader>
          <CardContent>
            <RecentSymptoms />
          </CardContent>
        </Card>

        <Card className="col-span-1">
          <CardHeader>
            <CardTitle>Upcoming Reminders</CardTitle>
            <CardDescription>Medications and appointments</CardDescription>
          </CardHeader>
          <CardContent>
            <UpcomingReminders />
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
"

"page.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/app/historique/page.tsx": "// src/app/historique/page.tsx
import { MedicalHistoryTimeline } from "@/components/historique/medical-history-timeline";
import medicalHistoryData from "@/data/medical-history.json"; // Adjust path if necessary
import { MedicalEvent } from "@/data/types";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function HistoriquePage() {
  const history = medicalHistoryData as MedicalEvent[];

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="text-3xl font-bold">Historique Médical</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Chronologie des événements médicaux, diagnostics et découvertes.
          </p>
        </CardContent>
      </Card>

      <MedicalHistoryTimeline events={history} />
    </div>
  );
}"

"page.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/app/laboratoire/page.tsx": "import { LabResultsHeader } from "@/components/laboratoire/lab-results-header";
import { LabResultChartCard } from "@/components/laboratoire/lab-result-chart-card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card } from "@/components/ui/card";

export default function LabResults() {
  return (
    <div className="space-y-6">
      <LabResultsHeader />

      <Tabs defaultValue="all">
        <TabsList className="mb-6">
          <TabsTrigger value="all">All</TabsTrigger>
          <TabsTrigger value="hematology">Hématologie</TabsTrigger>
          <TabsTrigger value="biochemistry">Biochimie Sanguine</TabsTrigger>
          <TabsTrigger value="hormones">Hormones</TabsTrigger>
          <TabsTrigger value="vitamins">Vitamines</TabsTrigger>
        </TabsList>

        <TabsContent value="all" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="p-6">
              <LabResultChartCard
                name="Cholesterol, Total"
                unit="mg/dL"
                category="Biochimie Sanguine"
                refRange="&lt;200"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="HDL Cholesterol"
                unit="mg/dL"
                category="Biochimie Sanguine"
                refRange="&gt;40"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="Leucocytes"
                unit="10³/µL"
                category="Hématologie"
                refRange="4.0-11.0"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="Ferritine"
                unit="ng/mL"
                category="Biochimie Sanguine"
                refRange="20-250"
              />
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="hematology" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="p-6">
              <LabResultChartCard
                name="Leucocytes"
                unit="10³/µL"
                category="Hématologie"
                refRange="4.0-11.0"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="Erythrocytes"
                unit="10⁶/µL"
                category="Hématologie"
                refRange="4.5-5.9"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="Hémoglobine"
                unit="g/dL"
                category="Hématologie"
                refRange="13.5-17.5"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="Hématocrite"
                unit="%"
                category="Hématologie"
                refRange="40-52"
              />
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="biochemistry" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="p-6">
              <LabResultChartCard
                name="Cholesterol, Total"
                unit="mg/dL"
                category="Biochimie Sanguine"
                refRange="&lt;200"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="HDL Cholesterol"
                unit="mg/dL"
                category="Biochimie Sanguine"
                refRange="&gt;40"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="LDL Cholesterol"
                unit="mg/dL"
                category="Biochimie Sanguine"
                refRange="&lt;100"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="Ferritine"
                unit="ng/mL"
                category="Biochimie Sanguine"
                refRange="20-250"
              />
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="hormones" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="p-6">
              <LabResultChartCard
                name="TSH"
                unit="mIU/L"
                category="Hormones"
                refRange="0.4-4.0"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="T4 Libre"
                unit="ng/dL"
                category="Hormones"
                refRange="0.8-1.8"
              />
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="vitamins" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="p-6">
              <LabResultChartCard
                name="Vitamine D"
                unit="ng/mL"
                category="Vitamines"
                refRange="30-100"
              />
            </Card>

            <Card className="p-6">
              <LabResultChartCard
                name="Vitamine B12"
                unit="pg/mL"
                category="Vitamines"
                refRange="200-900"
              />
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
"

"page.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/app/prescriptions/page.tsx": "import { PrescriptionsHeader } from "@/components/prescriptions/prescriptions-header";
import { PrescriptionsList } from "@/components/prescriptions/prescriptions-list";

export default function Prescriptions() {
  return (
    <div className="space-y-6">
      <PrescriptionsHeader />
      <PrescriptionsList />
    </div>
  );
}
"

"page.tsx", "C:/Users/Ben/Downloads/poul-main/poul-main/src/app/symptomes/page.tsx": "import { SymptomsHeader } from "@/components/symptomes/symptoms-header";
import { SymptomsLog } from "@/components/symptomes/symptoms-log";

export default function Symptoms() {
  return (
    <div className="space-y-6">
      <SymptomsHeader />
      <SymptomsLog />
    </div>
  );
}
"

"lab-results.json", "C:/Users/Ben/Downloads/poul-main/poul-main/src/data/lab-results.json": "[
  // Example from CHU Toulouse - Autonomic Nervous System
  {
    "reportDate": "2024-02-07", // Date effectuée
    "reportName": "COMPTE RENDU D'EXPLORATION DU SYSTEME NERVEUX AUTONOME",
    "labName": "CHU Toulouse, Hôpital de Rangueil",
    "doctor": "Dr Pierre ROBIN / Pr Jean-Michel SENARD",
    "filePath": "ocr_doc_p13_p15.pdf", // Assuming pages 13-15 of combined PDF
    "sections": [
      {
        "sectionName": "Mensurations",
        "tests": [
          { "name": "Poids", "value": 71, "unit": "kg" },
          { "name": "Taille", "value": 181, "unit": "cm" },
          { "name": "IMC", "value": 21.7, "unit": "kg/m²" }
        ]
      },
      {
        "sectionName": "Respiration Ample (bpm)",
        "tests": [
          { "name": "Respiration Ample (bpm)", "value": "23 (1)" }
        ]
      },
      {
        "sectionName": "Rapport 30/15",
        "tests": [
          { "name": "Rapport 30/15", "value": "1,11 (1)" }
        ]
      },
      {
        "sectionName": "Contraction isométrique (mmHg)",
        "tests": [
          { "name": "Contraction isométrique (mmHg)", "value": "non faite" }
        ]
      },
      {
        "sectionName": "Variation PA orthostatisme (mmHg)",
        "tests": [
          { "name": "Variation PA orthostatisme (mmHg)", "value": "-10/+5 (0)" }
        ]
      },
      {
        "sectionName": "Résultat normal / intermédiaire / anormal",
        "tests": [
          { "name": "Résultat normal", "value": 0 },
          { "name": "Résultat intermédiaire", "value": 0.5 },
          { "name": "Résultat anormal", "value": 1 }
        ]
      },
      {
        "sectionName": "Autres mesures - Sécrétion sudorale (SUDOSCAN®) µS",
        "tests": [
          { "name": "MS", "value": 85 },
          { "name": "MI", "value": 86 }
        ]
      },
      {
        "sectionName": "Autres mesures - Pression Artérielle Centrale (mmHg)",
        "tests": [
          { "name": "Pression Artérielle Centrale (mmHg)", "value": "(0)" }
        ]
      },
      {
        "sectionName": "Autres mesures - Vitesse de l'onde de pouls (m/s)",
        "tests": [
          { "name": "Vitesse de l'onde de pouls (m/s)", "value": null } // Value not provided
        ]
      },
      {
        "sectionName": "Interprétation (Résumé)",
        "summary": "Bonne qualité a comporté la réalisation des deux tests d'orthostatisme actif et passif. Fluctuations de la fréquence cardiaque lors de l'épreuve de respiration ample, la quantification des fluctuations de la fréquence cardiaque survenant immédiatement après le lever actif et la mesure des conductances cutanées par la méthode Sudoscan®. Analyse spectrale de la variabilité sinusale et mesure des résistances périphériques et la valeur du baro réflexe spontané en position couchée, puis en position debout. Pression artérielle est normale (131/73 mmHg). Fréquence cardiaque moyenne est aux alentours de 83 bpm avec un rythme sinusal. Les épreuves d'orthostatisme (actif et passif) permettent d'identifier une accélération anormale de la fréquence cardiaque (supérieure à 30 bpm) symptomatique et sans chute tensionnelle, ce qui correspond à un syndrome de tachycardie posturale orthostatique. L'analyse spectrale de la variabilité sinusale retrouve une multiplication par 4 de la valeur du rapport BF/HF témoignant d'une capacité d'activation sympathique lors du levé. Les valeurs maximales de conductances cutanées explorant l'activité du contingent somatique du système nerveux autonome sont normales aux quatre membres.",
        "tests": []
      },
      {
        "sectionName": "Conclusion (Résumé)",
        "summary": "Il existe bien quelques éléments « dysautonomiques » d'interprétation difficile en raison d'un déséquilibre de la balance sympatho vagale patents avec une hyperactivité sympathique. Ce profil incite à introduire parfaitement bien dans le cadre d'une tachycardie posturale associée à une encéphalomyélite myalgique. Ce diagnostic d'exclusion suppose bien entendu que toutes les explorations réalisées jusqu'à présent et dont je n'ai pas le détail s'avèrent normales (cardiologique, biologique,...). En pratique, il faut proscrire toute réadaptation intensive à l'effort qui va aggraver la situation. Il doit bien entendu poursuivre une activité physique modérée en se référant à la technique de PACING dont je lui ai expliqué les principes et qu'il pourra trouver bien détaillé sur le site internet « One million missing ». Pour la tachycardie posturale qui est invalidante, je vous propose d'introduire sous votre surveillance un médicament bétabloquant de votre choix ou le cas échéant du PROCORALAN à dose modérée. Sincèrement dévoué.",
        "tests": []
      }
    ]
  },
  // Example from Cerballiance Breteuil - Bouchard - 19.05.2023 (Parasitology & Coproculture)
  {
    "reportDate": "2023-05-19", // Prélevé le
    "reportName": "COPROCULTURE ET EXAMEN PARASITOLOGIQUE DES SELLES (PKO)",
    "labName": "Laboratoire de Biologie Médicale Breteuil - Bouchard",
    "doctor": "Dr DESSAINT JEAN MARIE",
    "filePath": "ocr_doc_p16_p19.pdf",
    "sections": [
      {
        "sectionName": "COPROCULTURE - EXAMEN MACROSCOPIQUE",
        "tests": [
          { "name": "Consistance", "value": "Selles moulées" },
          { "name": "Couleur", "value": "Brune" },
          { "name": "Glaires", "value": "Absence", "status": "normal" },
          { "name": "Sang", "value": "Absence", "status": "normal" }
        ]
      },
      {
        "sectionName": "COPROCULTURE - EXAMEN DIRECT",
        "tests": [
          { "name": "Hématies", "value": "Absence", "status": "normal" },
          { "name": "Leucocytes", "value": "Absence", "status": "normal" },
          { "name": "Levures", "value": "Absence", "status": "normal" }
        ]
      },
      {
        "sectionName": "COPROCULTURE - BIOLOGIE MOLECULAIRE",
        "tests": [
          { "name": "Bactéries entéropathogènes (PCR)", "value": "Absence de bactéries entéropathogènes", "status": "normal" }
        ],
        "summary": "Absence de bactéries entéropathogènes dans les selles (Shigella spp, Salmonella spp, Yersinia spp, Campylobacter spp, Plesiomonas spp, Vibrio spp, E. coli entéropathogènes)."
      },
      {
        "sectionName": "EXAMEN PARASITOLOGIQUE DES SELLES (PKO) - EXAMEN MACROSCOPIQUE",
        "tests": [
          { "name": "Parasites", "value": "Absence", "status": "normal" }
        ]
      },
      {
        "sectionName": "EXAMEN PARASITOLOGIQUE DES SELLES (PKO) - EXAMEN MICROSCOPIQUE",
        "tests": [
          { "name": "Élément parasitaire", "value": "Absence d'élément parasitaire", "status": "normal" }
        ],
        "summary": "Examen parasitologique des selles négatif. L'émission des parasites dans les selles étant discontinue, un examen négatif ne permet pas d'exclure formellement une étiologie parasitaire. Il est recommandé de répéter l'examen sur trois jours à quelques jours d'intervalle."
      }
    ]
  },
  // Example: Cerballiance Jean Jaures - 24/06/24 - Hematology
  {
    "reportDate": "2024-06-24",
    "reportName": "HEMATOLOGIE - NUMERATION FORMULE SANGUINE",
    "labName": "CERBALLIANCE JEAN JAURES",
    "doctor": "Dr MAHAMADALY Houssene",
    "filePath": "ocr_doc_p26_p27.pdf",
    "sections": [
      {
        "sectionName": "NUMERATION FORMULE SANGUINE",
        "tests": [
          { "name": "Hématies", "value": 5.26, "unit": "T/L", "referenceRange": "4,53 à 5,79", "status": "normal" },
          { "name": "Hémoglobine", "value": 155, "unit": "g/L", "referenceRange": "134 à 167", "status": "normal" },
          { "name": "Hématocrite", "value": 46.6, "unit": "%", "referenceRange": "39,2 à 48,6", "status": "normal" },
          { "name": "V.G.M.", "value": 88.6, "unit": "fl", "referenceRange": "79,6 à 94,0", "status": "normal" },
          { "name": "T.C.M.H.", "value": 29.5, "unit": "pg", "referenceRange": "27,3 à 32,8", "status": "normal" },
          { "name": "C.C.M.H.", "value": 333, "unit": "g/L", "referenceRange": "324 à 363", "status": "normal" },
          { "name": "Erythroblastes", "value": 0.3, "unit": "%", "referenceRange": "0,0", "status": "high" }, // Slightly above
          { "name": "Leucocytes", "value": 3.82, "unit": "G/L", "referenceRange": "4,09 à 11,00", "status": "low" },
          { "name": "Polynucléaires neutrophiles", "value": 53.9, "unit": "%", "subTests": [{ "name": "Abs", "value": 2.06, "unit": "G/L", "referenceRange": "1,78 à 6,95", "status": "normal"}] },
          { "name": "Polynucléaires éosinophiles", "value": 2.9, "unit": "%", "subTests": [{ "name": "Abs", "value": 0.11, "unit": "G/L", "referenceRange": "0,05 à 0,59", "status": "normal"}] },
          { "name": "Polynucléaires basophiles", "value": 0.5, "unit": "%", "subTests": [{ "name": "Abs", "value": 0.02, "unit": "G/L", "referenceRange": "< à 0,10", "status": "normal"}] },
          { "name": "Lymphocytes", "value": 33.5, "unit": "%", "subTests": [{ "name": "Abs", "value": 1.28, "unit": "G/L", "referenceRange": "1,34 à 3,92", "status": "low"}] },
          { "name": "Monocytes", "value": 8.9, "unit": "%", "subTests": [{ "name": "Abs", "value": 0.34, "unit": "G/L", "referenceRange": "0,23 à 0,77", "status": "normal"}] },
          { "name": "Myélémie", "value": 0.3, "unit": "%", "referenceRange": "< 2", "status": "normal", "comment": "(Métamyélocytes, myélocytes, promyélocytes)" },
          { "name": "Plaquettes", "value": 172, "unit": "G/L", "referenceRange": "172 à 398", "status": "normal" }
        ]
      }
    ]
  }
  // ... Add ALL other lab reports here. This is a lot of manual work.
  // Pay close attention to dates, units, reference ranges, and any comments.
  // For tests with multiple components (like fatty acids), use the `subTests` array.
]"

"patient-profile.json", "C:/Users/Ben/Downloads/poul-main/poul-main/src/data/patient-profile.json": "{
  "name": "Benoit Marechal",
  "dob": "1999-08-27",
  "sex": "M",
  "contact": {
    "address": "14 AVENUE MONFRAY, 13007 MARSEILLE"
  }
}"

"medical-history.json", "C:/Users/Ben/Downloads/poul-main/poul-main/src/data/medical-history.json": "[
  {
    "year": "12 ans",
    "title": "Premier problème de santé",
    "description": "Apparition d'un urticaire cholinergique (forte réaction à la chaleur et à la transpiration – plaque sur tout le corps – démangeaisons fortes)."
  },
  {
    "year": "15 ans",
    "title": "Déclenchement des troubles principaux",
    "description": "Première consommation de cannabis avec mauvaise réaction (bas trip).",
    "details": [
      "Développement consécutif d'un trouble panique sévère (jusqu'à 15-20 crises d'angoisse par jour très forte (tachycardie forte jusqu’à 200, tout les muscles tendus, angoisse de mort)).",
      "Apparition progressive et simultanée de : Fatigue, Troubles digestifs (sensation de \"pierre\" à l'estomac, digestion perturbée), Sommeil non récupérateur.",
      "→ Point de départ d'une cascade de symptômes neurologiques et digestifs."
    ],
    "labSummary": "Les prises de sang montrent régulièrement des anomalies au niveau des globules blanc (particulièrement neutropénie) mais rien d’autre."
  },
  {
    "year": "17 ans",
    "title": "Prise de IPP et conséquences",
    "description": "Prise de IPP + anti-inflammatoire pour maux de tête et tensions au cou (qui était lié au stress chronique des crises d’angoisses).",
    "details": [
      "Déclenchement pour la première fois de ballonnements et crises de rots au niveau de l’estomac à cause du manque d’acidité causé par l’ipp (qui ne sont jamais partis jusqu’à maintenant en 2024 !!)"
    ]
  },
  {
    "year": "18 ans (début des études de FAC)",
    "title": "Aggravation marquée multisystémique",
    "description": "Symptômes digestifs : Douleurs gastriques et ballonnements importants, Indigestion constante, Diarrhées chroniques.",
    "details": [
      "Symptômes neurologiques/autonomiques : Tachycardie, Stress intense, Migraines.",
      "Symptômes musculo-squelettiques : Raideur et inflammation de la nuque, Articulations rigides.",
      "Troubles cognitifs et émotionnels sévères : Brouillard mental fort, Troubles importants de la concentration, Anhédonie, Troubles dissociatifs.",
      "→ Apparition d'un tableau clinique complexe suggérant une atteinte multisystémique."
    ]
  },
  {
    "year": "18-19 ans",
    "title": "Période d'investigations et traitements initiaux",
    "description": "Examens initiaux :",
    "details": [
      "Bilans sanguins standard répétés : sans anomalie.",
      "Tests négatifs pour : Helicobacter pylori, Diabète et hyperglycémie.",
      "Sérologie Epstein-Barr : positive (infection ancienne potentiellement significative).",
      "Gastroscopie : diagnostic de gastrite chronique."
    ],
    "discoveries": [
      {
        "name": "Magnésium bisglycinate",
        "description": "Amélioration spectaculaire des crises d'angoisses apparue lors de mes 15 ans (de 9,2/10 à 2/10 en quelques heures).",
        "details": ["Suggère le rôle d’une carence en magnesium dans l’apparition de mes crises d’angoisses."]
      },
      {
        "name": "Probiotique Alflorex (première comprimé)",
        "description": "Réaction paradoxale sévère immédiate :",
        "details": [
          "Tachycardie à 180 bpm",
          "Vomissements",
          "Urination ultra-fréquente",
          "Déshydratation",
          "Malaise pré-syncopal"
        ],
        "outcome": "Hospitalisation avec bilan normal. Rémission de tout mes symptômes dès le lendemain (plus aucun symptômes à la suite d’une réaction de jarisch herxheimer très forte)."
      }
    ]
  },
  {
    "year": "18-19 ans (Post-Alflorex et antibiothérapie)",
    "title": "Évolution après Alflorex et nouveaux diagnostics",
    "description": "Un mois plus tard (après la première prise d'Alflorex) : Sinusite nécessitant une antibiothérapie.",
    "details": [
      "Récidive brutale de tous les symptômes post-antibiotiques.",
      "Seconde tentative d'Alflorex sans effet.",
      "→ Suggère une perturbation profonde du microbiote intestinal.",
      "Diagnostic établi d'intolérance au gluten et au lactose."
    ]
  },
  {
    "year": 2019,
    "title": "Imagerie Cervicale",
    "description": "Examens d'imagerie du rachis cervical.",
    "imaging": [
      {
        "date": "2019-04-19",
        "type": "Scanner du rachis cervical",
        "location": "Rachis cervical",
        "clinic": "Clinique Bouchard, Marseille",
        "indication": "Exploration d'une névralgie cervicobrachiale gauche",
        "results": [
          "Fusion quasi-complète C3-C4 (corps vertébraux, articulaires postérieures et processus épineux)",
          "Attitude scoliotique convexe gauche centrée sur le bloc C3-C4",
          "Rétrécissement foraminal minime C3-C4 à droite",
          "Pas d'autre rétrécissement foraminal ou extraforaminal visible",
          "Pas de débord discal significatif",
          "Pas d'étroitesse canalaire constitutionnelle"
        ],
        "conclusion": "Fusion quasi-complète C3-C4 isolée responsable d'une discrète attitude scoliotique."
      },
      {
        "date": "2019-07-01",
        "type": "IRM cervicale",
        "location": "Rachis cervical",
        "clinic": "GIE d'imagerie médicale du Haut Bugey",
        "indication": "Cervicalgies récurrentes, notion de bloc fusionnel C3-C4. Technique : T1 et T2 sagittales, et axiale T2.",
        "results": [
          "Absence d'anomalie de signal/hauteur des corps vertébraux",
          "Bloc fusionnel incomplet C3-C4 avec disque aminci",
          "Fusion des facettes articulaires postérieures C3-C4",
          "Discopathies C4-C5 et C5-C6 débutantes",
          "Débord discal postéro-latéral gauche modéré en C4-C5",
          "Espaces péri-médullaires et cordon médullaire normaux"
        ],
        "conclusion": "Bloc fusionnel C3-C4 et discopathies débutantes."
      }
    ]
  },
  {
    "year": 2021,
    "title": "Imagerie, régime cétogène et analyse de selles",
    "description": "Poursuite des investigations et événements marquants.",
    "imaging": [
      {
        "date": "2021-09-21",
        "type": "IRM Rachis Cervical",
        "location": "Rachis Cervical",
        "clinic": "Centre de santé Gerland, Lyon",
        "indication": "Bilan de cervicalgies chez un patient de 22 ans",
        "results": [
          "Raideur globale du rachis cervical",
          "Ankylose vertébrale partielle C3-C4 côté droit",
          "Discopathie protrusive focale C4-C5 postéromédiane et paramédiane gauche",
          "Discopathies protrusives minimes C5-C6 et C6-C7",
          "Pas d'anomalie médullaire ou des parties molles"
        ],
        "conclusion": "Possibilité de névralgie C5 gauche."
      }
    ],
    "details": [
      "01/10/2021 : Échec du régime cétogène (mon corps ne s’adapte pas à la cétogenèse – aucune énergie et sensation de malaise +++) :",
      "  o Lors d’une sortie effondrement brutal avec convulsions – un monsieur me porte dans sa voiture et appelle les urgences.",
      "  o Arrivé à l’hôpital : cortisol bas, acidose avec trou anionique augmenté, hypoglycémie, hypothermie.",
      "  o Récupération très lente suite à cette épisode grosse aggravation de tout les symptômes. Le moindre stress me met en état de choc et la nourriture ne me donne quasiment plus d’énergie."
    ],
    "labResults": [
      {
        "reportDate": "2021-11-17",
        "reportName": "Analyse de selles",
        "labName": "Non spécifié",
        "sections": [
          {
            "sectionName": "Analyse de selles",
            "tests": [
              { "name": "pH fécal", "value": 6.0, "referenceRange": "6.5-7.0", "status": "low", "comment": "-7.7% sous norme" }
            ],
            "summary": "Déséquilibres majeurs de la flore : Déficit massif en Enterococcus spp (-99.8%), Déficit critique en Bifidobacterium (-99.9%), Pseudomonas en limite haute, Bactéroïdes en limite basse. → Confirme le déséquilibre profond du microbiote."
          }
        ]
      }
    ]
  },
  {
    "year": 2022,
    "title": "Fibroscopie et Infection COVID-19",
    "description": "Investigations digestives et impact du COVID-19.",
    "details": [
      "20/01/2022 - Fibroscopie à Marseille (Hôpital Saint Joseph) :",
      "  Contexte : malaises post prandiaux avec aérophagie et vomissements itératifs, asthénie intense.",
      "  Résultats complets : Œsophage : muqueuse normale, absence d'œsophagite; Cardia : en place; Estomac : gastrite minime sans ulcération; Bulbe et duodénum normaux; Biopsies systématiques (H. Pylori et maladie cœliaque).",
      "  → Persistance d'une gastrite minime avec muqueuse œsophagienne normale.",
      "02/04/2022 - Infection COVID-19 : Test PCR positif avec mutation K417N.",
      "  Point charnière dans l'évolution : aggravation ultérieure de l'intolérance aux graisses.",
      "  Aggravation post-COVID : Intolérance marquée aux graisses, Hypoglycémies réactionnelles, Apparition de « Biers spot » sur les mains et bras, Reflux biliaires, Éructations incessantes (centaines par jour – aggravation dysbiose), Aggravation de la dysautonomie, Prise de poids de 10kg (majoritairement graisse) impossible à perdre."
    ]
  },
  {
    "year": 2023,
    "title": "Bilans sanguins, hormonaux, mycotoxiques et microbiote",
    "description": "Multiples analyses révélant des perturbations complexes.",
    "labResults": [
      {
        "reportDate": "2023-05-10",
        "reportName": "Bilan sanguin complet",
        "labName": "Non spécifié",
        "sections": [
          {
            "sectionName": "Système hématologique",
            "tests": [
              { "name": "Leucopénie", "value": null, "status": "abnormal" },
              { "name": "Neutrophiles bas", "value": null, "status": "low" },
              { "name": "Lymphocytes bas", "value": null, "status": "low" }
            ]
          },
          {
            "sectionName": "Déséquilibres électrolytiques et métaboliques",
            "tests": [
              { "name": "Potassium", "value": 3.3, "unit": "mmol/L", "referenceRange": "3.5-5.1", "status": "low" },
              { "name": "HDL-Cholestérol", "value": 1.05, "unit": "mmol/L", "referenceRange": "> 1.45", "status": "low" },
              { "name": "Folates sériques", "value": 7.1, "unit": "nmol/L", "referenceRange": "9.8-42.5", "status": "low" }
            ]
          },
          {
            "sectionName": "Anomalies hormonales",
            "tests": [
              { "name": "DHEA", "value": 609, "unit": "μg/dL", "referenceRange": "238-539", "status": "high" },
              { "name": "Vitamine D", "value": 67, "unit": "nmol/L", "status": "borderline" }
            ]
          },
          {
            "sectionName": "Contamination mycotoxique significative",
            "tests": [
              { "name": "Ochratoxine A", "value": "10.80 ng/g", "referenceRange": "<7.5", "status": "high", "comment": "+44% vs norme" },
              { "name": "Dihydrocitrinone", "value": "38.05 ng/g", "referenceRange": "<25", "status": "high", "comment": "+52.2% vs norme" }
            ]
          }
        ]
      },
      {
        "reportDate": "2023-05-12",
        "reportName": "Bilan des acides biliaires dans le sang",
        "labName": "Non spécifié",
        "sections": [
          {
            "sectionName": "Acides biliaires primaires massivement élevés",
            "tests": [
              { "name": "Acide cholique", "value": "2.496 μmol/L", "status": "high", "comment": "+524%" },
              { "name": "Acide chénodésoxycholique", "value": "1.027 μmol/L", "status": "high", "comment": "+128%" }
            ]
          },
          {
            "sectionName": "Acides biliaires conjugués augmentés",
            "tests": [
              { "name": "Acide glycholique", "value": "0.519 μmol/L", "status": "high", "comment": "+108%" },
              { "name": "Acide glycochénodésoxycholique", "value": "2.425 μmol/L", "status": "high", "comment": "+80%" }
            ]
          },
          {
            "sectionName": "Acides biliaires secondaires élevés",
            "tests": [
              { "name": "Acide désoxycholique", "value": "0.877 μmol/L", "status": "high", "comment": "+95%" },
              { "name": "Acide lithocholique", "value": "0.030 μmol/L", "status": "high", "comment": "+36%" }
            ]
          }
        ],
        "summary": "Perturbations majeures des acides biliaires."
      },
      {
        "reportDate": "2023-05-19",
        "reportName": "Parasitologie des selles",
        "labName": "Non spécifié",
        "sections": [
          { "sectionName": "Parasitologie", "tests": [{ "name": "Parasites", "value": "Négatives", "status": "negative"}], "summary": "Exclusion d'une infection parasitaire." }
        ]
      },
      {
        "reportDate": "2023-05-30",  
        "reportName": "Analyse approfondie du microbiote intestinal",
        "labName": "Non spécifié",
        "sections": [
          {
            "sectionName": "Augmentations pathologiques multiples bactéries",
            "tests": [
              { "name": "Dorea", "value": "1.156%", "status": "high", "comment": "+72%" },
              { "name": "Bacteroides", "value": "26.388%", "status": "high", "comment": "+16%" },
              { "name": "Bacteroides vulgatus", "value": "5.263%", "status": "high", "comment": "+49%" },
              { "name": "Bacteroides fragilis", "value": "0.995%", "status": "high", "comment": "+805%" },
              { "name": "Escherichia", "value": "0.225%", "status": "high", "comment": "+73%" },
              { "name": "Desulfovibrio", "value": "0.839%", "status": "high", "comment": "+499%" },
              { "name": "Fusobacterium", "value": "0.437%", "status": "high", "comment": "+21,750% soit 217,5 fois le taux maximum !!" }
            ]
          },
          {
            "sectionName": "Diminutions critiques",
            "tests": [
              { "name": "Bifidobacterium", "value": "0.029%", "status": "low", "comment": "-42%" },
              { "name": "Akkermansia muciniphila", "value": "0.024%", "status": "low", "comment": "limite basse" },
              { "name": "Faecalibacterium prausnitzii", "value": "2.261%", "status": "low", "comment": "-49%" },
              { "name": "Butyrivibrio", "value": "0.012%", "status": "low", "comment": "-68%" }
            ]
          },
          {
            "sectionName": "Déséquilibres majeurs des Phyla",
            "tests": [
              { "name": "Firmicutes", "value": "64.53%", "status": "high", "comment": "augmenté" },
              { "name": "Bacteroidetes", "value": "30.40%", "status": "low", "comment": "diminué" },
              { "name": "Actinobacteria", "value": "0.94%", "status": "low", "comment": "diminué" },
              { "name": "Proteobacteria", "value": "1.81%", "status": "low", "comment": "diminué" },
              { "name": "Verrucomicrobia", "value": "0.03%", "status": "low", "comment": "diminué" },
              { "name": "Fusobacteria", "value": "0.44%", "status": "high", "comment": "très augmenté" }
            ],
            "summary": "Confirmation d'une dysbiose sévère et complexe."
          }
        ]
      },
      {
        "reportDate": "2023-05-23",
        "reportName": "Bilan hormonal",
        "labName": "Non spécifié",
        "sections": [
          {
            "sectionName": "Hormones",
            "tests": [
                { "name": "DHEA", "value": "609.0 μg/dL", "status": "high", "comment": "maintenue élevée" },
                { "name": "Testostérone", "value": "13.3 nmol/L", "status": "low", "comment": "basse" }
            ],
            "summary": "Déséquilibre hormonal persistant."
          }
        ]
      },
      {
        "reportDate": "2023-05-25",
        "reportName": "Test Microbiome complet (Biomesight)",
        "labName": "Biomesight", 
        "sections": [
            {
                "sectionName": "Scores fonctionnels altérés",
                "tests": [
                    { "name": "Santé intestinale", "value": "63.43/100", "status": "abnormal"},
                    { "name": "Probiotiques", "value": "65.70/100", "status": "abnormal"},
                    { "name": "Commensaux", "value": "77.60/100", "status": "abnormal"},
                    { "name": "Pathobiontes", "value": "33.33/100", "status": "abnormal"}
                ]
            },
            {
                "sectionName": "Déficits marqués en bactéries bénéfiques",
                "tests": [
                    { "name": "Akkermansia", "value": "-35%", "status": "low"},
                    { "name": "Bifidobacterium", "value": "-98%", "status": "low"},
                    { "name": "Roseburia", "value": "-37.1%", "status": "low"},
                    { "name": "Lactobacillus", "value": "-70%", "status": "low"}
                ]
            },
            {
                "sectionName": "Excès en bactéries potentiellement pathogènes",
                "tests": [
                    { "name": "Bacteroidetes", "value": "+34.4%", "status": "high"},
                    { "name": "Proteobacteria", "value": "+112.5%", "status": "high"}
                ],
                "summary": "Confirmation quantitative du déséquilibre de l'écosystème intestinal."
            }
        ]
      },
      {
        "reportDate": "2023-06-02",
        "reportName": "Test SIBO",
        "labName": "Non spécifié",
        "sections": [
          { "sectionName": "SIBO", "tests": [{ "name": "Test SIBO", "value": "négatif", "status": "negative"}]}
        ]
      }
    ]
  },
  {
    "year": 2024,
    "title": "Profils et bilans récents",
    "description": "Analyses d'acides gras, hématologiques et gastroscopie.",
    "labResults": [
      {
        "reportDate": "2024-02-16",
        "reportName": "Profil des acides gras",
        "labName": "Non spécifié",
        "sections": [
          {
            "sectionName": "Élévations significatives",
            "tests": [
              { "name": "Acide Stéarique", "value": "+7.3%", "status": "high" },
              { "name": "Acide Oléique", "value": "+7.6%", "status": "high" },
              { "name": "Acide Linoléique", "value": "+10.5%", "status": "high" }
            ]
          },
          {
            "sectionName": "Déficits en acides gras essentiels",
            "tests": [
              { "name": "EPA", "value": "-20%", "status": "low" },
              { "name": "DHA", "value": "-27.2%", "status": "low" },
              { "name": "Indice Oméga 3", "value": "-29.8%", "status": "low" }
            ]
          },
          {
            "sectionName": "Ratios déséquilibrés",
            "tests": [
              { "name": "AA/EPA", "value": "+81.3%", "status": "high" },
              { "name": "Oméga 6/Oméga 3", "value": "+25.8%", "status": "high" }
            ],
            "summary": "Perturbation majeure du métabolisme des acides gras."
          }
        ]
      },
      {
        "reportDate": "2024-05-31",
        "reportName": "Bilan hématologique (Aggravation)",
        "labName": "Non spécifié",
        "sections": [
          {
            "sectionName": "Anomalies hématologiques",
            "tests": [
              { "name": "Leucopénie", "value": "3.19 G/L", "status": "low" },
              { "name": "Lymphopénie", "value": "0.95 G/L", "status": "low" },
              { "name": "Thrombopénie", "value": "154 G/L", "status": "low" }
            ]
          }
        ]
      },
      {
        "reportDate": "2024-06-24",
        "reportName": "Bilan hématologique (Persistance)",
        "labName": "Non spécifié",
        "sections": [
          {
            "sectionName": "Anomalies sanguines (avec légère amélioration)",
            "tests": [
              { "name": "Leucopénie", "value": "3.82 G/L", "status": "low" },
              { "name": "Lymphopénie", "value": "1.28 G/L", "status": "low" },
              { "name": "Plaquettes", "value": "172 G/L", "status": "normal" } 
            ]
          }
        ]
      }
    ],
    "details": [
        "14/10/2024 (Dr Miolane, Lyon) - Gastroscopie :",
        "  Indication : épigastralgies, éructations.",
        "  Résultats : D2, D1, le bulbe sont normaux; Cavité gastrique examinée en vision directe et rétrovision; Muqueux clair; Biopsies réalisées à différents niveaux; Pince diaphragmatique située à 42 cm des arcades dentaires; Nouvelle œsophagite grade B → Première apparition documentée d'une œsophagite."
    ],
    "imaging": [
      {
        "date": "2024-12-02",
        "type": "IRM cervicale",
        "location": "Rachis cervical",
        "clinic": "Hôpital Saint Joseph, Marseille",
        "indication": "Bilan de discopathie dégénérative, douleur latérocervicale gauche",
        "results": [
          "Uncodiscarthrose C3-C4 avec net amincissement de l'interligne",
          "Protrusion discale C4-C5 postéromédiane et paramédiane gauche",
          "Bombement discal C5-C6 paramédian droit",
          "Pas de signe de myélopathie ou conflit visible"
        ],
        "conclusion": "Discopathie C3-C4 et C4-C5 sans signe de myélopathie."
      }
    ]
  },
  {
    "year": "Réponses aux traitements",
    "title": "Réponses aux traitements",
    "description": "Résumé des réponses positives et négatives à divers traitements.",
    "treatments": [
      {
        "name": "Alflorex (B. infantis 35624)",
        "positive": true,
        "effects": [
          "Rémission complète pendant 1 mois",
          "Effet perdu après antibiothérapie (amoxicilline)"
        ]
      },
      {
        "name": "Antibiotique Flagyl",
        "positive": true,
        "effects": [
          "Amélioration significative des selles",
          "Réduction du ballonnement",
          "Disparition de l'halitose",
          "Disparition de la gorge prise le matin",
          "Retour de l'appétit pour le sucre et le sucre me donne de l’énergie ! (aucun aliment ne me donne de l’énergie normalement)",
          "Gain d’Energie",
          "Disparition des « Biers spot »",
          "Grosses améliorations des intolérances alimentaires",
          "Capacité à marcher à nouveau sans bas de contention force 3"
        ],
        "notes": "Effet perdu après 3 semaines"
      },
      {
        "name": "Colostrum",
        "positive": true,
        "effects": [
          "Amélioration des ballonnements",
          "Effet de relaxation profond (baisse de l’inflammation je penses à travers les effets immunomodulateurs des immunoglobulines)",
          "Amélioration significative des intolérances alimentaires"
        ]
      },
      {
        "name": "Desmodium ascendens",
        "positive": true,
        "effects": ["Amélioration de 40% des symptômes plusieurs fois (mais ne marche pas à chaque fois)"]
      },
      {
        "name": "L-reuteri et Biogaia",
        "positive": true,
        "effects": [
          "Très grosse amélioration de la dysautonomie pendant 2 jours",
          "Effet impossible à reproduire",
          "Meilleur appétit",
          "Meilleure tolérance au soleil"
        ]
      },
      {
        "name": "Nicotine (patches)",
        "positive": true,
        "effects": ["Amélioration durable de la dysautonomie (jusqu’à maintenant)"]
      },
      {
        "name": "Charbon actif",
        "positive": true,
        "effects": ["Amélioration de la sensation d’empoisonnement"]
      },
      {
        "name": "Bicarbonate",
        "positive": true,
        "effects": ["Soulagement des crises aigues d’inflammation de l’œsophage ou de l’estomac"]
      },
      {
        "name": "Utilisation d’un filtre à air HEPA dans la zone de vie",
        "positive": true,
        "effects": ["Meilleur sommeil et + d’énergie"]
      },
      {
        "name": "Inclinaison du lit à 15 degrés",
        "positive": true,
        "effects": ["Réveil moins empoisonné"]
      },
      {
        "name": "Piracetam",
        "positive": true,
        "effects": ["Amélioration forte de ma dysautonomie et transformation de mes capacités cognitives mais perte totale de l’appétit"]
      },
      {
        "name": "Mégadose de vitamine C 10-15 grammes",
        "positive": true,
        "effects": ["Amélioration de la circulation sanguine nette et baisse de l’inflammation pendant 4-5 heures"]
      },
      {
        "name": "Injection de vitamine B12",
        "positive": true,
        "effects": ["Effet de relaxation profond"]
      },
      {
        "name": "Injection de vitamine B1",
        "positive": true,
        "effects": ["Amélioration du sommeil"]
      },
      {
        "name": "Augmentation de l’hydratation et rajout d’électrolytes",
        "positive": true,
        "effects": ["Amélioration de la digestion et amélioration de la dysautonomie"]
      },
      {
        "name": "Benzodiazépines",
        "positive": true,
        "effects": ["Légère amélioration des symptômes digestifs mais aggravation des symptômes cognitifs"]
      },
      {
        "name": "Magnésium",
        "positive": true,
        "effects": ["Disparition des crises d’angoisses"]
      },
      {
        "name": "Arrêt de l’utilisation de lessive et adoucissants chimiques",
        "positive": true,
        "effects": ["Disparition de l’urticaire cholinergique"]
      },
      {
        "name": "Cholestyramine",
        "positive": false,
        "effects": ["Aggravation la perte d'appetits"]
      },
      {
        "name": "Vitamine D",
        "positive": false,
        "effects": ["Douleurs nerveuses", "Secousses hypnique à répétition au moment de l’endormissement avec grandes difficultés de s’endormir", "Crises d’angoisses physiologiques (décharges d’adrénalines)"]
      },
      {
        "name": "Folates",
        "positive": false,
        "effects": ["Réaction sévère même à faible dose (empoisonnement)"]
      },
      {
        "name": "TMF (transplantation matière fécale)",
        "positive": false, 
        "effects": [
          "Transplantation à partir d’un jeune donneur en excellente santé.",
          "Amélioration d’une partie des symptômes avec même disparition de l’intolérance au sport temporairement.",
          "Mais ensuite apparition de symptômes d’arthrite : douleurs en bas du dos, épaules, et maintenant grosse aggravation des syndrome d’arthrite au niveau du cou.",
          "Également changements de personnalité."
        ]
      },
      {
        "name": "Mélatonine (1mg)",
        "positive": false,
        "effects": ["Enormément de mal à respirer, apparemment lié à l’effet anticholinergique (aggravation de la dysautonomie)"]
      },
      {
        "name": "Antihistaminique h1-h2",
        "positive": false,
        "effects": ["Aggravation de la dysautonomie, fatigue extrême"]
      },
      {
        "name": "Cuivre bysglicinate (en se basant sur le diagnostique d’une carence)",
        "positive": false,
        "effects": ["Douleurs forte aux nerfs avec perte de sensibilité permanente au niveau du touché"]
      },
      {
        "name": "Souche de kefir contaminée",
        "positive": false,
        "effects": ["Apparition d’une dysbiose sévère type H2s avec souches agressives et résistantes aux traitements"]
      },
      {
        "name": "Rifaximine",
        "positive": false,
        "effects": ["Apparition de deux infections fongiques des oreilles pendant le traitement qui ont causés une perte d’audition permanente"]
      },
      {
        "name": "Régime carnivore",
        "positive": false, 
        "effects": [
          "Amélioration partielle au début mais apparition d’une odeur très acide au niveau de la transpiration (qui n’est jamais partie depuis)",
          "Et juste après mon corps ne supporte plus (sensation de malaise)"
        ]
      }
    ]
  },
  {
    "year": "Notes diverses",
    "title": "Autres notes cliniques",
    "description": "Observations et sensibilités diverses.",
    "notes": [
      "Hypersensibilité gastrique à l'acidité",
      "Cravings paradoxaux d'aliments acides",
      "Amélioration de la langue saburrale par l'acidité",
      "Hypersensibilité : Réactions à l'histamine, Flush, Alternance chaud/froid, Démangeaisons post-prandiales",
      "Dysautonomie permanente : Malaises orthostatiques, Sensation pré-syncopale régulière, Aggravation lors des poussées de gastrite, Symptômes vagaux"
    ]
  }
]"

"food-sensitivities.json", "C:/Users/Ben/Downloads/poul-main/poul-main/src/data/food-sensitivities.json": "{
  "reportDate": "2024-02-20",
  "labName": "Bioavenir",
  "technique": "RIDA®CHIP FoodGuide",
  "candidaAlbicans": "sérologie positive",
  "categories": [
    {
      "name": "CÉRÉALES GLUTEN",
      "items": [
        { "foodName": "Gluten", "value": 3.4, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "CÉRÉALES SANS GLUTEN",
      "items": [
        { "foodName": "Riz", "value": 4.2, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "EDULCORANTS",
      "items": [
        { "foodName": "Miel", "value": 3.8, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "FRUITS",
      "items": [
        { "foodName": "Ananas", "value": 2.9, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Banane", "value": 2.0, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Orange", "value": 0.9, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Poivron", "value": 1.5, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Tomate", "value": 1.8, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "GRAINES ET NOIX",
      "items": [
        { "foodName": "Amande", "value": 3.0, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Noisette", "value": 2.3, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "HERBES ET ÉPICES",
      "items": [
        { "foodName": "Ail", "value": 10.7, "unit": "µg/ml", "reactionLevel": "moderate" },
        { "foodName": "Vanille", "value": 4.4, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "LÉGUMES",
      "items": [
        { "foodName": "Carotte", "value": 1.4, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Haricot vert", "value": 7.2, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Petit pois", "value": 1.2, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Soja", "value": 1.4, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "LEVURES",
      "items": [
        { "foodName": "Levures", "value": 1.4, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "OEUFS",
      "items": [
        { "foodName": "Blanc d´oeuf", "value": 2.4, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Jaune d´oeuf", "value": 2.5, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "POISSONS ET FRUITS DE MER",
      "items": [
        { "foodName": "Écrevisse", "value": 6.1, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "PRODUITS LAITIERS",
      "items": [
        { "foodName": "Lait de vache", "value": 2.2, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Lait et fromage de brebis", "value": 1.8, "unit": "µg/ml", "reactionLevel": "none" },
        { "foodName": "Lait et fromage de chèvre", "value": 2.0, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    },
    {
      "name": "VIANDES",
      "items": [
        { "foodName": "Poulet", "value": 1.8, "unit": "µg/ml", "reactionLevel": "none" }
      ]
    }
  ]
}"

"biomesight-summary.json", "C:/Users/Ben/Downloads/poul-main/poul-main/src/data/biomesight-summary.json": "{
  "reportDate": "2023-05-25",
  "gutWellnessScore": {
    "value": 63.43,
    "status": "NEEDS IMPROVEMENT"
  },
  "diversity": 91.00,
  "probiotics": 65.70,
  "commensals": 77.60,
  "pathobionts": 33.33,
  "keyBacteria": [
    { "name": "Akkermansia", "value": "0.013%", "range": "(0.02-3.0%)", "interpretation": "Low", "score": "65.0%" },
    { "name": "Bifidobacterium", "value": "0.049%", "range": "(>=2.5-5.0%)", "interpretation": "Low", "score": "1.96%" },
    { "name": "Faecalibacterium", "value": "10.709%", "range": "(>=10.0-15.0%)", "interpretation": "Optimal", "score": "100.0%" },
    { "name": "Lactobacillus", "value": "0.003%", "range": "(0.01-0.5%)", "interpretation": "Low", "score": "30.0%" },
    { "name": "Roseburia", "value": "3.145%", "range": "(5.0-11.0%)", "interpretation": "Low", "score": "62.9%" },
    { "name": "Bacteroidetes (Phylum)", "percentile": 68, "value": "47.056%", "range": "(0.0-35.0%)", "interpretation": "High" },
    { "name": "Proteobacteria (Phylum - Pathobiont)", "value": "8.498%", "range":"(0.0-4.0%)", "interpretation": "High", "score": "0.0%"},
    { "name": "Fusobacteria (Phylum - Pathobiont)", "value": "0.396%", "range":"(0.0-0.03%)", "interpretation": "High", "score": "0.0%"}
    // Add a few other significant bacteria if you want, like high pathobionts or very low beneficials
  ],
  "recommendations": {
    "foodToAdd": ["cranberries", "strawberries", "green tea", "matcha", "pomegranate"],
    "foodToReduce": ["rosemary extract (example if it was listed)"],
    "probioticsToAdd": ["Lactobacillus rhamnosus GG (example)"]
  }
}"

"current-status.json", "C:/Users/Ben/Downloads/poul-main/poul-main/src/data/current-status.json": "[
  {
    "category": "Symptomes actuel (18/05/2025)",
    "date": "2025-05-18",
    "symptoms": [
      { "description": "Réveil empoisonné et sommeil pas récuperateur" },
      { "description": "Progression rapide du vitiligo" },
      { "description": "Inflammation énorme à chaque repas" },
      { "description": "Anhédonie et dépression chimique qui s’aggrave" },
      { "description": "Taux glycémie a jeun", "details": "1,25-1,30" },
      { "description": "Pic à 200 facilement avec sucre rapide." },
      { "description": "Mauvaise haleine constante avec mauvais gout dans la bouche et gorge prise" },
      { "description": "Prise de poids et particulièrement de gras" },
      { "description": "Intolérance à la chaleur (urticaire cholinergique)" },
      { "description": "Perte de sensibilité progressivement pire au niveau de la peau (je pense que c’est lié à l’anhedonie manque de dopamine)" },
      { "description": "Transpiration très acide (odeur vinaigre), si je prends du kombucha ou autre chose acide, dysautonomie +++ et jambes qui sont commes crampés et plus d’énergie, le bicarbonate aide" },
      { "description": "Regulierement l’impression que mon cou va se casser et mon dos aussi (examen montre une détérioration discopathie)" }
    ]
  },
  {
    "category": "Protocole achard effet (19/03/2024)",
    "date": "2024-03-19",
    "symptoms": [
      { "description": "Perte de poids et perte de retention d’eau rapide" },
      { "description": "Amélioration anhedonie depression chimique de jour en jour" },
      { "description": "Disparition dysbiose h2s, disparition craving souffrés" },
      { "description": "Amélioration des selles parfaites" },
      { "description": "Apparition de craving de sucre qui me donne beaucoup d’energie vs pas d’energie avant" },
      { "description": "Disparition des biers spots sur les mains" },
      { "description": "Disparition de la gorge prise le matin" },
      { "description": "Apparition d’un gout acidulé dans la bouche" }
    ]
  }
]"

"types.ts", "C:/Users/Ben/Downloads/poul-main/poul-main/src/data/types.ts": "// src/data/types.ts

export interface MedicalEvent {
  year: number | string; // Can be "12 ans" or a specific year
  title: string;
  description: string; // Main description for the event
  details?: string[]; // Bullet points or further details
  labSummary?: string; // Brief summary of lab findings for this period
  discoveries?: Array<{ // For the "Découvertes" section
    name: string;
    description: string;
    details?: string[];
    outcome?: string;
  }>;
  treatments?: Array<{ // For "Réponses aux traitements"
    name:string;
    positive?: boolean; // true for positive, false for negative
    effects: string[];
    notes?: string;
  }>;
  imaging?: Array<{
    date: string; // YYYY-MM-DD
    type: string; // e.g., Scanner, IRM
    location: string; // e.g., Rachis cervical
    clinic: string;
    indication: string;
    results: string[];
    conclusion: string;
  }>;
  labResults?: LabReport[]; // Array of lab reports associated with this period/event
  notes?: string[]; // General notes for "Notes diverses"
  currentSymptoms?: CurrentSymptomEntry[]; // For current symptoms page
}

export interface LabReport {
  reportDate: string; // YYYY-MM-DD
  reportName: string; // e.g., "Bilan sanguin complet", "Analyse de selles"
  labName: string;
  doctor?: string; // Prescribing or validating doctor
  filePath?: string; // Optional: if you want to link to the PDF scan
  sections: LabSection[];
}

export interface LabSection {
  sectionName: string; // e.g., "Hématologie", "Biochimie Sanguine"
  tests: LabTest[];
  summary?: string; // e.g., "Absence de bactéries entéropathogènes"
}

export interface LabTest {
  name: string;
  value: string | number | null; // Can be numerical, textual (e.g., "Négatif", "< 0.1"), or null
  unit?: string;
  referenceRange?: string; // e.g., "4.0-11.0", "<5.0", "Négatif"
  status?: "normal" | "low" | "high" | "abnormal" | "positive" | "negative" | "borderline" | "significant";
  comment?: string;
  subTests?: LabTest[]; // For grouped tests like fatty acid profiles
}

export interface CurrentSymptomEntry {
  category: string; // e.g., "Symptomes actuel (18/05/2025)", "Protocole achard effet (19/03/2024)"
  date?: string; // YYYY-MM-DD or descriptive
  symptoms: Array<{
    description: string;
    details?: string; // e.g. for "Taux glycémie a jeun 1,25-1,30"
  }>;
}

// For Biomesight specific summary
export interface BiomesightSummary {
  reportDate: string; // YYYY-MM-DD
  gutWellnessScore: {
    value: number;
    status: string; // e.g., "NEEDS IMPROVEMENT"
  };
  diversity: number; // Percentage
  probiotics: number; // Percentage
  commensals: number; // Percentage
  pathobionts: number; // Percentage
  keyBacteria?: Array<{
    name: string;
    percentile?: number; // For some chart representation
    value: string; // e.g. "0.013%"
    range?: string; // e.g. "(0.02-3.0%)"
    interpretation?: string; // e.g. "Low"
    score?: string; // e.g. "65.0%"
  }>;
  recommendations?: {
    foodToAdd?: string[];
    foodToReduce?: string[];
    probioticsToAdd?: string[];
  }
}

// For Food Sensitivities IgG
export interface FoodSensitivityTest {
  foodName: string;
  value: number;
  unit: string; // e.g., "µg/ml"
  reactionLevel: "low" | "moderate" | "high" | "none"; // Derived from value
  // Reaction levels based on legend: ●◌◌ : <10 µg/ml (none/low), ●●◌ : 10 à 19.99 µg/ml (moderate), ●●●: >20 µg/ml (high)
}

export interface FoodSensitivityReport {
  reportDate: string;
  labName: string;
  technique: string; // e.g., "RIDA®CHIP FoodGuide"
  candidaAlbicans: string; // e.g., "sérologie positive"
  categories: Array<{
    name: string; // e.g., "CÉRÉALES GLUTEN", "FRUITS"
    items: FoodSensitivityTest[];
  }>;
}

export interface PatientProfile {
  name: string;
  dob: string; // YYYY-MM-DD
  sex: string;
  contact?: {
    address?: string;
    phone?: string;
    email?: string;
  };
  // You can add more fields here like allergies, primary doctor etc.
}"

